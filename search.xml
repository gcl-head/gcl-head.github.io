<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>经典排序算法</title>
      <link href="2021/01/11/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>2021/01/11/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0-算法概述"><a href="#0-算法概述" class="headerlink" title="0. 算法概述"></a>0. 算法概述</h2><p>转载自  <a><a href="https://www.cnblogs.com/onepixel/p/7674659.html">https://www.cnblogs.com/onepixel/p/7674659.html</a></a></p><hr><h3 id="1-算法描述"><a href="#1-算法描述" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><p>十种常见排序算法可以分为两大类：</p><ul><li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</li></ul><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F0.png" alt="img"></p><h3 id="2-算法复杂度"><a href="#2-算法复杂度" class="headerlink" title="2. 算法复杂度"></a>2. 算法复杂度</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F1.png" alt="img"></p><h3 id="3-相关概念"><a href="#3-相关概念" class="headerlink" title="3. 相关概念"></a>3. 相关概念</h3><ul><li><p>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p></li><li><p>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</p></li><li><p>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</p></li><li><p>空间复杂度：是指算法在计算机。</p></li></ul><p>内执行时所需存储空间的度量，它也是数据规模n的函数。</p><h2 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h2><hr><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="1-算法描述-1"><a href="#1-算法描述-1" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>重复步骤1~3，直到排序完成。</li></ul><h3 id="2-动图演示"><a href="#2-动图演示" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F2.gif" alt="img"></p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">// 相邻元素两两对比</span></span><br><span class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">// 元素交换</span></span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h2><hr><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h3 id="1-算法描述-2"><a href="#1-算法描述-2" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><h3 id="2-动图演示-1"><a href="#2-动图演示-1" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F3.gif" alt="img"></p><h3 id="3-代码实现-1"><a href="#3-代码实现-1" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> minIndex, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class="comment">// 寻找最小的数</span></span><br><span class="line">                minIndex = j;                 <span class="comment">// 将最小数的索引保存</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        arr[i] = arr[minIndex];</span><br><span class="line">        arr[minIndex] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-算法分析"><a href="#4-算法分析" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h2 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h2><hr><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h3 id="1-算法描述-3"><a href="#1-算法描述-3" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><h3 id="2-动图演示-2"><a href="#2-动图演示-2" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F4.gif" alt="img"></p><h3 id="3-代码实现-2"><a href="#3-代码实现-2" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> preIndex, current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - <span class="number">1</span>;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-算法分析-1"><a href="#4-算法分析-1" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h2 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h2><hr><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><h3 id="1-算法描述-4"><a href="#1-算法描述-4" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h3 id="2-动图演示-3"><a href="#2-动图演示-3" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F5.gif" alt="img"></p><h3 id="3-代码实现-3"><a href="#3-代码实现-3" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> gap = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>); gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="comment">// 注意：这里和动图演示的不一样，动图是分组执行，实际操作是多个分组交替执行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> j = i;</span><br><span class="line">            <span class="keyword">var</span> current = arr[i];</span><br><span class="line">            <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[j - gap]) &#123;</span><br><span class="line">                 arr[j] = arr[j - gap];</span><br><span class="line">                 j = j - gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-算法分析-2"><a href="#4-算法分析-2" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。</p><h2 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h2><hr><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p><h3 id="1-算法描述-5"><a href="#1-算法描述-5" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><h3 id="2-动图演示-4"><a href="#2-动图演示-4" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F6.gif" alt="img"></p><h3 id="3-代码实现-4"><a href="#3-代码实现-4" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">        left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">        right = arr.slice(middle);</span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (left.length&gt;<span class="number">0</span> &amp;&amp; right.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (left.length)</span><br><span class="line">        result.push(left.shift());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (right.length)</span><br><span class="line">        result.push(right.shift());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-算法分析-3"><a href="#4-算法分析-3" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><h2 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h2><hr><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h3 id="1-算法描述-6"><a href="#1-算法描述-6" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><h3 id="2-动图演示-5"><a href="#2-动图演示-5" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F7.gif" alt="img"></p><h3 id="3-代码实现-5"><a href="#3-代码实现-5" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length,</span><br><span class="line">        partitionIndex,</span><br><span class="line">        left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">        right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        partitionIndex = partition(arr, left, right);</span><br><span class="line">        quickSort(arr, left, partitionIndex-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr, partitionIndex+<span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left ,right</span>) </span>&#123;     <span class="comment">// 分区操作</span></span><br><span class="line">    <span class="keyword">var</span> pivot = left,                      <span class="comment">// 设定基准值（pivot）</span></span><br><span class="line">        index = pivot + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            swap(arr, i, index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h2><hr><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><h3 id="1-算法描述-7"><a href="#1-算法描述-7" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><h3 id="2-动图演示-6"><a href="#2-动图演示-6" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F8.gif" alt="img"></p><h3 id="3-代码实现-6"><a href="#3-代码实现-6" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len;    <span class="comment">// 因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">arr</span>) </span>&#123;   <span class="comment">// 建立大顶堆</span></span><br><span class="line">    len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, i</span>) </span>&#123;     <span class="comment">// 堆调整</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">        largest = i;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    buildMaxHeap(arr);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h2><hr><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h3 id="1-算法描述-8"><a href="#1-算法描述-8" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul><h3 id="2-动图演示-7"><a href="#2-动图演示-7" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F9.gif" alt="img"></p><h3 id="3-代码实现-7"><a href="#3-代码实现-7" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">arr, maxValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>),</span><br><span class="line">        sortedIndex = <span class="number">0</span>;</span><br><span class="line">        arrLen = arr.length,</span><br><span class="line">        bucketLen = maxValue + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">            bucket[arr[i]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bucket[arr[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[sortedIndex++] = j;</span><br><span class="line">            bucket[j]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-算法分析-4"><a href="#4-算法分析-4" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><h2 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h2><hr><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p><h3 id="1-算法描述-9"><a href="#1-算法描述-9" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><h3 id="2-图片演示"><a href="#2-图片演示" class="headerlink" title="2. 图片演示"></a>2. 图片演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F10.png" alt="img"></p><h3 id="3-代码实现-8"><a href="#3-代码实现-8" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">arr, bucketSize</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> minValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">          minValue = arr[i];                <span class="comment">// 输入数据的最小值</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">          maxValue = arr[i];                <span class="comment">// 输入数据的最大值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 桶的初始化</span></span><br><span class="line">    <span class="keyword">var</span> DEFAULT_BUCKET_SIZE = <span class="number">5</span>;            <span class="comment">// 设置桶的默认数量为5</span></span><br><span class="line">    bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;</span><br><span class="line">    <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        buckets[i] = [];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 利用映射函数将数据分配到各个桶中</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        buckets[<span class="built_in">Math</span>.floor((arr[i] - minValue) / bucketSize)].push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    arr.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        insertionSort(buckets[i]);                      <span class="comment">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">            arr.push(buckets[i][j]);                     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-算法分析-5"><a href="#4-算法分析-5" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p><h2 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h2><hr><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h3 id="1-算法描述-10"><a href="#1-算法描述-10" class="headerlink" title="1. 算法描述"></a>1. 算法描述</h3><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul><h3 id="2-动图演示-8"><a href="#2-动图演示-8" class="headerlink" title="2. 动图演示"></a>2. 动图演示</h3><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%8E%92%E5%BA%8F11.gif" alt="img"></p><h3 id="3、-代码实现"><a href="#3、-代码实现" class="headerlink" title="3、 代码实现"></a>3、 代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">arr, maxDigit</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mod = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> dev = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev);</span><br><span class="line">            <span class="keyword">if</span>(counter[bucket]==<span class="literal">null</span>) &#123;</span><br><span class="line">                counter[bucket] = [];</span><br><span class="line">            &#125;</span><br><span class="line">            counter[bucket].push(arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(counter[j]!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                      arr[pos++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-算法分析-6"><a href="#4-算法分析-6" class="headerlink" title="4. 算法分析"></a>4. 算法分析</h3><p>基数排序基于分别排序，分别收集，所以是最稳定的。但技术排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到的新关键词序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。<br>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速排序 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建局域网私人网盘</title>
      <link href="2020/06/12/%E6%90%AD%E5%BB%BA%E5%B1%80%E5%9F%9F%E7%BD%91%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
      <url>2020/06/12/%E6%90%AD%E5%BB%BA%E5%B1%80%E5%9F%9F%E7%BD%91%E7%A7%81%E4%BA%BA%E7%BD%91%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前两天我从家里翻出了尘封已久的IPAD2，想要有个大屏幕玩手游。结果发现，别说想要玩的手游了，连炉石传说都打不开，只能勉强看看片，时代的眼泪啊。于是算上IPAD，我已经有了平板、手机、笔记本和台式机四样常用的电子设备了。虽然苹果设备之间可以通过airdrop方便地传递数据，但我的IPAD2太古老，并没有这个功能，再加上在家都是用台式机进行工作，为了传输文件特地打开mac很不方便。所以就萌生了在家中搭建一个私人网盘的想法，因为在局域网中搭建，因此速度的上限就是路由器的上限，传输文件非常快。</p></blockquote><h2 id="1-相关软件下载安装"><a href="#1-相关软件下载安装" class="headerlink" title="1. 相关软件下载安装"></a>1. 相关软件下载安装</h2><p>涉及软件主要有两款：</p><ul><li>Wampserver</li><li>OwnCloud</li></ul><p>首先下载Wampserver，以下是<a href="http://www.wampserver.com/en/">Wampserver官网</a>。</p><p>OwnCloud最后一个支持Windows的版本是8.0.16，可前往<a href="https://owncloud.org/download/older-versions/">OwnCloud官网</a>自行下载。</p><p><strong>OwnCloud下载完之后将内容解压至Wampserver安装目录下的www文件夹中,默认安装地址为<code>C:\wamp64\www</code>。</strong></p><h2 id="2-Wampserver配置"><a href="#2-Wampserver配置" class="headerlink" title="2. Wampserver配置"></a>2. Wampserver配置</h2><p>启动Wampserver，左键右下角图标，进入phpMyAdmin。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E9%85%8D%E7%BD%AEwampserver.png" alt="配置wampserver"></p><p>默认账号是root，默认密码为空。如果需要修改密码，可以在账户栏中的root用户处修改权限。</p><p><img src="https://exp-picture.cdn.bcebos.com/988e1c532f6323858153ba22cce833e038725df8.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1" alt="windows下用owncloud搭建私有云"></p><p>接下来在数据库栏中为ownCloud添加数据表。</p><p><img src="https://exp-picture.cdn.bcebos.com/506d92f1d8a7263330e19550c02c56ee7a7f44f8.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1" alt="windows下用owncloud搭建私有云"></p><p>然后在Wampserver中添加ownCloud服务并配置服务器名称和路径，如下图。</p><p><img src="https://exp-picture.cdn.bcebos.com/cca2552c56ee7b7ffb6b24c66ef4fcf5ef0d41f8.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1" alt="windows下用owncloud搭建私有云"><img src="https://exp-picture.cdn.bcebos.com/e4b5e2f5ee0d3ace29b22ad887e265e7350fbbf8.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1" alt="windows下用owncloud搭建私有云"></p><p>最后重启所有服务，启动ownCloud</p><h2 id="3-OwnCloud配置"><a href="#3-OwnCloud配置" class="headerlink" title="3. OwnCloud配置"></a>3. OwnCloud配置</h2><p>我们可以直接在浏览器中输入<code>owncloud/</code>进入ownCloud或者点击右下角图标从菜单栏进入，如下图所示。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%89%93%E5%BC%80Owncloud.png" alt="打开Owncloud"></p><p>第一次进入ownCloud可以设置管理员用户名和密码以及云盘的本地文件夹位置，如下图。</p><p><img src="https://exp-picture.cdn.bcebos.com/65390a23beb9763eada7e3656ad06de89b61b0f8.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1" alt="windows下用owncloud搭建私有云"></p><h2 id="4-局域网可访问"><a href="#4-局域网可访问" class="headerlink" title="4. 局域网可访问"></a>4. 局域网可访问</h2><p>完成了前三步，我们已经可以在本地访问部署完成的ownCloud云盘了。但我的目的是想要在不同设备间传输和共享文件，因此还需要实现云盘的局域网可访问。</p><p>首先，需要让ownCloud暴露在局域网中可被访问到。</p><p>有两种方式，第一种简单粗暴，将防火墙关闭，如下图。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="关闭防火墙"></p><p>第二种方式更加优雅，如果你无法忍受右下角由于长期关闭防火墙而一直显示红叉的话，可以单独允许Apache通过防火墙。点击防火墙和网络保护页面中的<strong>允许应用通过防火墙</strong>。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E5%85%81%E8%AE%B8%E5%BA%94%E7%94%A8%E9%80%9A%E8%BF%87%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="允许应用通过防火墙"></p><p>然后点击<strong>更改设置</strong>，再点击<strong>允许其他应用</strong>。找到apache安装目录下bin文件中的httpd.exe文件，点击添加，点击确定。默认安装位置的httpd.exe在如下文件路径下，<code>C:\wamp64\bin\apache\apache2.4.41\bin</code>。</p><p>现在，你的ownCloud已经可以在局域网中被访问了，但是会返回403错误。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/403.png" alt="403"></p><p>这种情况需要配置apache的配置文件，对于默认安装路径在如下路径中修改vhosts文件，<code>C:\wamp64\bin\apache\apache2.4.41\conf\extra</code>。</p><p>将<strong>Require local</strong>改写成<strong>Require all granted</strong>。</p><p>接下来便可正常访问了，如出现<strong>信任域</strong>问题，按照图中要求进行修改即可。</p><p>用户只需要在浏览器中输入主机的ip地址和ownCloud即可进入网盘，如<code>192.168.3.3/owncloud/</code>。</p><h2 id="5-可能遇到的问题"><a href="#5-可能遇到的问题" class="headerlink" title="5. 可能遇到的问题"></a>5. 可能遇到的问题</h2><ul><li><p><img src="https://img-blog.csdnimg.cn/20190607163907636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMjM5NzY3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>遇到上图的情况，说明ownCloud的版本过高，须安装本博客推荐的8.0.16或者更低的支持Windows的版本。</p></li><li><p><img src="https://img-blog.csdnimg.cn/20190607163918495.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMjM5NzY3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>遇到上述情况，是因为Apache和OwnCloud的版本不吻合。虽然建议是升级ownCloud，但由于，当前版本已经是支持Windows的最高版本了，因此我们可以反向降低Apache的版本来让两个软件的版本吻合。</p></li><li><p>加入你在上传或者下载或者打开网盘的某个文件的时候出现问题，则应该首先检查该文件路径中是否包含中文，由于ownCloud和Windows用的utf编码不同，因此只支持英文，这可以说是ownCloud最遗憾的地方了。你需要将相关的中文路径都用英文表示才可以正常使用ownCloud。</p></li></ul><h2 id="6-外网访问"><a href="#6-外网访问" class="headerlink" title="6. 外网访问"></a>6. 外网访问</h2><p>本文只实现了局域网访问，但如果读者对于自己订制可以互联网访问的云盘有需求的话，我有以下路线可供参考。</p><ul><li>在服务器搭建。想要外网访问，最简单的方式就是在服务器搭建云盘项目。但服务器往往是Linux系统，需要读者自行去搜索Linux下搭建云盘的文档进行学习。</li><li>DDNS。市场上较为先进的路由器（如博主所用的凌霄四核）或猫都有DDNS的功能，即动态域名服务，能够实现将域名绑定到动态的ip上让外网访问。当然，这需要用户拥有公网ip，且需要将猫调整为直连模式或者使用猫来进行DDNS才行。</li><li>内网穿透。当用户没有公网ip或家中有机顶盒要给电视使用无法将猫调为直连模式时，可以采用这种方式，通过第三方服务器作为互联网和本地的转接站，典型的有<a href="https://hsk.oray.com/">花生壳</a>等。但这种方式的传输速度上限是取决于内网穿透服务器的带宽的，因此往往需要一定的花费来提高内网穿透服务器带宽。</li></ul>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="2020/05/15/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>2020/05/15/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型和判断"><a href="#数据类型和判断" class="headerlink" title="数据类型和判断"></a>数据类型和判断</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>8种数据类型：</p><ul><li>number</li><li>string</li><li>boolean</li><li>undefined</li><li>null</li><li>Symbol</li><li>BigInt</li><li>Object</li></ul><p>其中Object类型又包括：</p><ul><li>Array</li><li>Function</li><li>Date</li><li>RegExp</li></ul><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><ul><li>typeof</li></ul><p>​    typeof返回一个表示数据类型的字符串，返回结果包括：number、string、boolean、object、undefined、function。typeof可以对基本类型number、string  、boolean、undefined做出准确的判断；而对于引用类型，除了function之外返回的都是object。</p><ul><li><p>instanceof</p><p>专门用于实例和构造函数对应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Obj(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> Obj); <span class="comment">// output: true</span></span><br></pre></td></tr></table></figure></li><li><p>Array.isArray()：ES6 新增，用来判断是否是’Array’。<code>Array.isArray(&#123;&#125;)</code>返回<code>false</code>。</p></li></ul><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><p>显式强制类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>) <span class="comment">//1</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">123</span>) <span class="comment">//&#x27;123&#x27;</span></span><br><span class="line"><span class="number">123.</span>toString <span class="comment">//&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>) <span class="comment">//&#x27;true&#x27;</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">123</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li><li><p>显式解析数字字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;42&#x27;</span>) <span class="comment">//42</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;42rem&#x27;</span>) <span class="comment">//42</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;42rem&#x27;</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li><li><p>隐式强制类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> + <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="string">&#x27;123&#x27;</span> - <span class="number">0</span> <span class="comment">// 123</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] + [<span class="number">3</span>, <span class="number">4</span>]   <span class="comment">//&quot;1,23,4&quot; 因为数组的valueOf()操作无法得到简单基本类型值，于是调用toString()，因此两个数组变成了&quot;1,2&quot;和&quot;3,4&quot;，+将它们拼接后返回。</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2></li></ul><p>​    在 JS 中，函数和对象都是浅拷贝（地址引用）；其他的，例如布尔值、数字等基础数据类型都是深拷贝（值引用）。</p><p>​    一般情况下,使用<code>JSON.parse(JSON.stringify(data))</code>进行深拷贝较为实用。即将对象转化为JSON字符串以字符串形势进行值引用后再转化回对象。但该方法对于复杂的对象类型，例如携带方法的对象无法完成拷贝。另外对于字符串如果转化为JSON，会在原有基础上增加一层双引号。</p><p>​    值得提醒的是，ES6 的<code>Object.assign()</code>和 ES7 的<code>...</code>解构运算符都是“浅拷贝”。实现深拷贝还是需要自己手动撸“轮子”或者借助第三方库（例如<code>lodash</code>）</p><p>深拷贝实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组的深拷贝函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">src</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneArr</span>(<span class="params">src, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">      target.push(cloneArr(item, []));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      target.push(deepClone(item, &#123;&#125;));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象的深拷贝实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">src</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Object&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">src, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Reflect</span>.ownKeys(src);</span><br><span class="line">  <span class="keyword">let</span> value = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    value = src[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      target[key] = cloneArr(value, []);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果是对象而且不是数组, 那么递归调用深拷贝</span></span><br><span class="line">      target[key] = deepClone(value, &#123;&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      target[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要调用deepClone即可实现各种类型的深拷贝。</p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>当元素互相嵌套时，事件从子元素向父元素方向传递就叫做事件冒泡；</p><p>反之则称为事件捕获；</p><p><code>addEventListener</code>给出了第三个参数同时支持冒泡与捕获：默认是<code>false</code>，事件冒泡；设置为<code>true</code>时，是事件捕获。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100vw; background: red;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 事件捕获：先输出 &quot;外层click事件触发&quot;; 再输出 &quot;内层click事件触发&quot;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> useCapture = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line">  btn.addEventListener(</span><br><span class="line"><span class="javascript">    <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&quot;内层click事件触发&quot;</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line">    useCapture</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>);</span></span><br><span class="line"><span class="javascript">  app.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;外层click事件触发&quot;</span>);</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用的高阶函数"><a href="#常用的高阶函数" class="headerlink" title="常用的高阶函数"></a>常用的高阶函数</h2><p>​    高阶函数是对其他函数进行操作的函数，操作可以是将它们作为参数，或者是返回它们。 简单来说，高阶函数是一个接收函数作为参数或将函数作为输出返回的函数。</p><ul><li><p>map()</p><p><strong>返回</strong>一个由原数组中的每个元素执行callback函数后的返回值组成的<strong>新数组</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> results = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x*x</span><br><span class="line">&#125;) <span class="comment">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="built_in">console</span>.log(results)</span><br></pre></td></tr></table></figure></li><li><p>filter()</p><p>数组过滤, 对原数组每个元素执行回调函数保留返回值为true的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]</span><br><span class="line"><span class="keyword">var</span> re = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> !== <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(re)</span><br></pre></td></tr></table></figure></li><li><p>reduce()</p><p>以回调函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><p><code>array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> re = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;); <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(re)</span><br></pre></td></tr></table></figure></li><li><p>sort()</p><p>排序函数，默认排序根据ASCII码大小,因此会出现10排在2前面的情况，可以通过传入方法自定义sort()的排序方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure></li><li><p>some()</p><p>检索数组，对原数组的每个元素执行回调函数，如果有true则立刻返回true。</p></li><li><p>every()</p><p>检索数组，对原数组的每个元素执行回调函数，如果所有元素都返回true则返回true。</p></li><li><p>find()</p><p>检索数组，对原数组的每个元素执行回调函数，如果找到元素返回true，立刻返回该元素，否则返回undefined</p></li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>通常在js中函数外部是无法访问函数内部的变量的，比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ReferenceError: Can&#x27;t find variable: a</span></span><br></pre></td></tr></table></figure><p>但使用闭包就可以实现，即通过在函数中定义返回函数内部变量的方法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cout</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cout</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = test()</span><br><span class="line">b()</span><br></pre></td></tr></table></figure><p>这么看感觉闭包好像并没有什么作用，但闭包在面向对象编程中还是很有用的。比方说，他可以将函数与其所操作的某些数据（环境）关联起来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSizer</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.style.fontSize = size + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> size12 = makeSizer(<span class="number">12</span>)</span><br><span class="line"><span class="keyword">var</span> size14 = makeSizer(<span class="number">14</span>)</span><br><span class="line"><span class="keyword">var</span> size16 = makeSizer(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>比如上述代码，分别表示将字号调整为12、14和16px。</p><p>同理，他也可以用来模仿js中本不具备的私有方法。</p><p><strong>需要注意的是</strong>，如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在处理速度和内存消耗方面对脚本性能具有负面影响。</p><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name.toString()</span><br><span class="line">  <span class="built_in">this</span>.message = message.toString()</span><br><span class="line">  <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">this</span>.getMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，方法被重新赋值浪费了资源，却并没有利用到闭包的好处，因此建议改成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span>(<span class="params">name, message</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name.toString()</span><br><span class="line">  <span class="built_in">this</span>.message = message.toString()</span><br><span class="line">&#125;</span><br><span class="line">MyObject.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">&#125;;</span><br><span class="line">MyObject.prototype.getMessage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.message</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>米哈游前端面试</title>
      <link href="2020/05/15/%E7%B1%B3%E5%93%88%E6%B8%B8%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
      <url>2020/05/15/%E7%B1%B3%E5%93%88%E6%B8%B8%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>先不说题目，米哈游这家公司给我们应聘者的体验是非常好的。</p><ul><li>投简历网页没有很多冗余的信息要填，填完基本信息直接上传简历即可</li><li>如果面试不过会有有拒绝信</li><li>公司平均颜值很高（划掉）</li></ul><p>记忆力比较差，说一下自己记得的题目：</p><ul><li><p>惯例的自我介绍</p></li><li><p>Vue父子组件数据传递</p></li><li><p>Vue双向绑定是怎么实现的</p><p><a href="https://juejin.im/entry/59116fa6a0bb9f0058aaaa4c">双向绑定原理</a>（还没看懂~）</p></li><li><p>深拷贝的实现</p><p>回答了递归遍历和转字符串再转回来(<code>JSON.parse(JSON.stringify(data))</code> )，但面试官还追问有没有更好的方法</p></li><li><p>浅拷贝的实现</p><p>面试的时候很懵逼，不就是直接赋值就好了吗？后来查了一下，可能是只对于多层的数据，比如对象数组，只拷贝第一层元素的意思吧</p></li><li><p>元素类型，考察对于引用类型和基础类型的理解</p></li><li><p>自适应布局实现，比如左右定宽，中间如何自适应</p><ul><li>flex</li><li>bfc</li><li>calc</li></ul></li><li><p>居中方法</p><ul><li>flex</li><li>top+left+margin</li><li>transform: translate(<code>-50%</code>, <code>-50%</code>);</li></ul></li><li><p>es6中除了callback、promise外还有什么异步方法</p><p>没反应过来，应该是async</p></li><li><p>js为什么是同步的？</p><p>为了防止渲染dom产生冲突</p></li><li><p>异步方法原理</p><p>js是同步的，异步方法只是改变了调用顺序，异步事件扔给浏览器执行，完成扔进任务队列，主栈中代码执行完从任务队列中先进先出调用异步方法。所以js本身还是同步的。</p><p>顺带一提，promise的回调和settimeout是在不同队列中的。前者在<strong>MicroTask</strong>队列中，后者在<strong>MacroTask</strong>中，前者每次执行完队列中所有任务，而后者每次只会提取队列第一个执行。</p><p>也就是说如果我的某个 <strong>MicroTask</strong> 任务又推入了一个任务进入 <strong>MicroTask</strong> 队列，那么在主线程完成该任务之后，仍然会继续运行 microtasks 任务直到任务队列耗尽。</p><p><strong>而事件循环每次只会入栈一个 MacroTask ，主线程执行完该任务后又会先检查 Microtasks 队列并完成里面的所有任务后再执行 Macrotask</strong></p><ol><li><p>依次执行同步代码直至执行完毕；</p></li><li><p>检查MicroTask 队列，完成队列所有任务，然后跳至第三步，若没有需处理的异步任务，则直接跳至第三步；</p></li><li><p>检查MacroTask队列，执行队列中第一个异步任务。如果没有则调到第五步；</p></li><li><p>继续检查MicroTask队列，如果有任务则跳到第二步，没有则调到第三步；</p></li><li><p>两个队列都没有任务了，结束；</p></li></ol></li><li><p>Promise怎样才会调用then</p><p>resolve()</p></li><li><p>事件流</p><p>事件冒泡，事件捕获机制</p></li><li><p>动态生成元素，生成元素前怎么添加事件</p><p>在父级或者根元素添加事件，然后通过e.target来判断当前元素从而调用对应事件</p></li><li><p>原型链，父子类实现</p></li><li><p>还有什么想问的吗？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
            <tag> vue </tag>
            
            <tag> 米哈游 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android使用zbar进行二维码解码</title>
      <link href="2020/04/27/Android%E4%BD%BF%E7%94%A8zbar%E8%BF%9B%E8%A1%8C%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A7%A3%E7%A0%81/"/>
      <url>2020/04/27/Android%E4%BD%BF%E7%94%A8zbar%E8%BF%9B%E8%A1%8C%E4%BA%8C%E7%BB%B4%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在项目中常常需要扫描二维码的功能。这就需要一种可以压缩图片，并快速解码的方法。</p><p>zbar恰恰是你的最佳选择。他自带扫描二维码的页面不需要你手动去调用相机页面以及编写AutoFocus的逻辑，且速度极快。</p></blockquote><h2 id="1-安装zbar"><a href="#1-安装zbar" class="headerlink" title="1. 安装zbar"></a>1. 安装zbar</h2><p>引入jar包和so文件</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/865264-20180827092923347-193222905.png" alt="865264-20180827092923347-193222905"></p><p>如果jar文件和so文件放在libs下，需在app build.gradle的android标签中加入如下代码并<code>Sync Now</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jniLibs.srcDirs = [<span class="string">&#x27;libs&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将zbar包copy到项目</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/865264-20180827093028766-726566162.png" alt="865264-20180827093028766-726566162"></p><p> 这里包名不一样肯定会报错，clean project并改掉包名就好。</p><p>导入相关资源文件</p><p> drawable、drawable-hdpi、drawable-xhdpi和layout </p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/865264-20180827190106756-1049638413.png" alt="865264-20180827190106756-1049638413"></p><p>raw文件和values文件 </p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/865264-20180827190145954-817553189.png" alt="865264-20180827190145954-817553189"></p><p>注：values中相关资源不要直接替换，否则会覆盖之前的，需要打开文件将内容加到自己项目对应文件中。 </p><p>AndroidManifest.xml加入相关权限和扫描的Activity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">&quot;android.hardware.camera.autofocus&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.zbar.CaptureActivity&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-使用zbar"><a href="#2-使用zbar" class="headerlink" title="2. 使用zbar"></a>2. 使用zbar</h2><p>调用扫描界面 获取扫描结果</p><p>在需要打开扫描界面的地方直接跳转至CaptureActivity（使用startActivityForResult）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转到扫码界面扫码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goScan</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, CaptureActivity.class);</span><br><span class="line">    startActivityForResult(intent, REQUEST_CODE_SCAN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在onActivityResult的回调中即可获取扫描内容，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> REQUEST_CODE_SCAN:</span><br><span class="line">            <span class="comment">// 扫描二维码回传</span></span><br><span class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class="line">               <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//获取扫描结果</span></span><br><span class="line">                    Bundle bundle = data.getExtras();</span><br><span class="line">                    String result = bundle.getString(CaptureActivity.EXTRA_STRING);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态权限申请</strong></p><p>由于扫描需要调用相机，打开摄像头属于敏感权限，所以需要进行权限的动态申请，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">        <span class="keyword">case</span> R.id.get_code:</span><br><span class="line">            <span class="comment">//动态权限申请</span></span><br><span class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                goScan();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    goScan();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;你拒绝了权限申请，可能无法打开相机扫码哟！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-我遇到的问题"><a href="#3-我遇到的问题" class="headerlink" title="3. 我遇到的问题"></a>3. 我遇到的问题</h2><p>在电脑上进行模拟器测试的时候，二维码扫描一切正常，但使用真机进行测试的时候，报错说找不到<code>libZBarDecoder.so</code>文件。</p><p>貌似是版本兼容的问题，可以再<code>build.gradle</code>中添加如下代码解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    splits &#123;</span><br><span class="line">        abi &#123;</span><br><span class="line">            enable <span class="keyword">true</span></span><br><span class="line">            reset()</span><br><span class="line">            include <span class="string">&#x27;x86&#x27;</span>, <span class="string">&#x27;x86_64&#x27;</span>, <span class="string">&#x27;armeabi-v7a&#x27;</span>, <span class="string">&#x27;armeabi&#x27;</span></span><br><span class="line">            universalApk <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> zbar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android调用其他活动的方法和变量的方法</title>
      <link href="2020/04/13/Android%E8%B0%83%E7%94%A8%E5%85%B6%E4%BB%96%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%8F%98%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2020/04/13/Android%E8%B0%83%E7%94%A8%E5%85%B6%E4%BB%96%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%8F%98%E9%87%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在安卓开发中，随着app的复杂程度上升。会经常出现需要在自己<em>Activity</em>中调用别的<em>Activity</em>中方法和变量的情况。但因为找不到指向其他<em>Activity</em>实例的变量，所以没有办法获取其他<em>Activity</em>或者<em>Fragment</em>的非静态变量和方法。</p></blockquote><h2 id="1-使用静态关键词"><a href="#1-使用静态关键词" class="headerlink" title="1. 使用静态关键词"></a>1. 使用静态关键词</h2><p>第一种方法是将想要访问的变量和方法都设为静态的。这样就可以直接通过类名进行访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Pre_class[] pre_classes;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Pre_class[] getPre_classes() &#123;<span class="keyword">return</span> pre_classes;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPre_classes</span><span class="params">(Pre_class[] a)</span> </span>&#123;</span><br><span class="line">    pre_classes = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other Activities</span></span><br><span class="line">MainActivity.setPre_classes(pre_classes);</span><br></pre></td></tr></table></figure><h2 id="2-为活动创建实例"><a href="#2-为活动创建实例" class="headerlink" title="2. 为活动创建实例"></a>2. 为活动创建实例</h2><p>如果调用的方法或者变量是非静态的，那么第一种方法就不是这么实用了。而且静态也容易造成资源的消耗。因此将要调用的<em>Activity</em>的实例赋给该类的一个静态变量则是一个更好的选项。只需要消耗资源定义一个实例对象作为入口，就可以通过他来调用其他<em>Activity</em>的非静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> A instance=<span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    instantce = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other Activities</span></span><br><span class="line">MainActivity.instance.setPre_classes(pre_classes);</span><br></pre></td></tr></table></figure><hr><p>学会了这种技巧，我们便可以在进入某个<em>Activity</em>的情况下操其他<em>Activity</em>的变量方法，或者也可以用这种技巧在本<em>Activity</em>中的静态方法里操作非静态的方法或者变量了。</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android向后端传递数据</title>
      <link href="2020/04/13/Android%E5%90%91%E5%90%8E%E7%AB%AF%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/"/>
      <url>2020/04/13/Android%E5%90%91%E5%90%8E%E7%AB%AF%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p> 安卓开发中，网络交互是必不可少的。而安卓向后端发送请求的方式有很多种，本篇讲述我使用Http Connection来与后端交互的具体方法和代码。</p></blockquote><h2 id="1-请求网络权限"><a href="#1-请求网络权限" class="headerlink" title="1. 请求网络权限"></a>1. 请求网络权限</h2><p>在AndroidManifest.xml中添加权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--允许联网 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取GSM（2g）、WCDMA（联通3g）等网络状态的信息  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取wifi网络状态的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--保持CPU 运转，屏幕和键盘灯有可能是关闭的,用于文件上传和下载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WAKE_LOCK&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--获取sd卡写的权限，用于文件上传和下载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line">&lt;application</span><br><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br><span class="line">android:usesCleartextTraffic=&quot;true&quot;</span><br><span class="line"><span class="comment">&lt;!--...--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MainActivity.java中增加如下代码便可在主线程使用联网功能。在练手的时候可以使用，之后建议</p><p>将联网部分单独放在子线程中进行，提高app的流畅度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    <span class="comment">// 允许联网非多进程</span></span><br><span class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        StrictMode.ThreadPolicy policy = <span class="keyword">new</span> StrictMode.ThreadPolicy.Builder().permitAll().build();</span><br><span class="line">        StrictMode.setThreadPolicy(policy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-编写网络请求函数"><a href="#2-编写网络请求函数" class="headerlink" title="2. 编写网络请求函数"></a>2. 编写网络请求函数</h2><p>下面是我封装的网络请求类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String href = <span class="string">&quot;http://***&quot;</span>; <span class="comment">// 请求服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String session_value = <span class="string">&quot;&quot;</span>; <span class="comment">// session id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendByGet</span><span class="params">(String href)</span></span>&#123;</span><br><span class="line">        <span class="comment">//get的方式提交就是url拼接的方式</span></span><br><span class="line">        String path = href;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">            HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Cookie&quot;</span>, session_value); <span class="comment">// 更新session</span></span><br><span class="line">            <span class="comment">//获得结果码</span></span><br><span class="line">            <span class="keyword">int</span> responseCode = connection.getResponseCode();</span><br><span class="line">            <span class="keyword">if</span>(responseCode ==<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//请求成功 获得返回的流</span></span><br><span class="line">                <span class="keyword">if</span> (connection.getHeaderField(<span class="string">&quot;Set-Cookie&quot;</span>)!=<span class="keyword">null</span>)</span><br><span class="line">                    session_value = connection.getHeaderField(<span class="string">&quot;Set-Cookie&quot;</span>); <span class="comment">// 维护session</span></span><br><span class="line">                InputStream is = connection.getInputStream();</span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                is.close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//这样就得到服务器返回的数据了</span></span><br><span class="line">                <span class="keyword">return</span> baos.toString();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendByPost</span><span class="params">(String href, String text)</span></span>&#123;</span><br><span class="line">        String path = href;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">            HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            connection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Cookie&quot;</span>, session_value); <span class="comment">// 更新session</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//至少要设置的两个请求头</span></span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"><span class="comment">//            connection.setRequestProperty(&quot;Content-Length&quot;, data.length()+&quot;&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//post的方式提交实际上是留的方式提交给服务器</span></span><br><span class="line">            connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">            OutputStream outputStream = connection.getOutputStream();</span><br><span class="line">            outputStream.write(text.getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获得结果码</span></span><br><span class="line">            <span class="keyword">int</span> responseCode = connection.getResponseCode();</span><br><span class="line"><span class="comment">//            System.out.println(1);</span></span><br><span class="line"><span class="comment">//            System.out.println(responseCode);</span></span><br><span class="line">            <span class="keyword">if</span>(responseCode ==<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//请求成功</span></span><br><span class="line">                <span class="keyword">if</span> (connection.getHeaderField(<span class="string">&quot;Set-Cookie&quot;</span>)!=<span class="keyword">null</span>)</span><br><span class="line">                    session_value = connection.getHeaderField(<span class="string">&quot;Set-Cookie&quot;</span>); <span class="comment">// 维护session</span></span><br><span class="line">                InputStream is = connection.getInputStream();</span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                &#125;</span><br><span class="line">                is.close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//这样就得到服务器返回的数据了</span></span><br><span class="line">                <span class="keyword">return</span> baos.toString();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//请求失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，除了基础的设定请求时间，请求头等。如果返回的数据字段有<em>Set-Cookie</em>则还要根据该字段的值来更新类中存放cookie的变量，从而让每次请求都带有每个用户独有的信息方便服务器鉴别用户等，而不用每次都放在数据字段中带来带去。</p><h2 id="3-使用网络请求类"><a href="#3-使用网络请求类" class="headerlink" title="3. 使用网络请求类"></a>3. 使用网络请求类</h2><p>有了上述的网络请求类，我们只需要调用<code>HttpConnect.sendByGet()</code>或者<code>HttpConnect.sendByPost()</code>就可以进行http请求了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录验证...&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String login_data_text = HttpConnect.sendByPost(HttpConnect.href+<span class="string">&quot;/android_login/&quot;</span>,                                                       <span class="string">&quot;username=&quot;</span>+number+<span class="string">&quot;&amp;password=&quot;</span>+password);</span><br><span class="line">        <span class="comment">// json转码</span></span><br><span class="line">        Login_data login_data = JSON.parseObject(login_data_text, Login_data.class); </span><br><span class="line">        <span class="keyword">if</span> (login_data.getRe().equals(<span class="string">&quot;Fail&quot;</span>) ) &#123;</span><br><span class="line">            <span class="comment">// 关闭进度条</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">            msg.what = <span class="number">1</span>;</span><br><span class="line">            handler.sendMessage(msg);</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建user_data文件存储用户登录账号方便下次自动登录</span></span><br><span class="line">        SharedPreferences.Editor editor = getSharedPreferences(<span class="string">&quot;user_data&quot;</span>, MODE_PRIVATE).edit();</span><br><span class="line">        editor.putString(<span class="string">&quot;user_number&quot;</span>, number);</span><br><span class="line">        editor.putString(<span class="string">&quot;user_password&quot;</span>, password);</span><br><span class="line">        editor.apply();</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(LoginActivity.<span class="keyword">this</span>, MainActivity.class);</span><br><span class="line">        intent.putExtra(<span class="string">&quot;user_name&quot;</span>, login_data.getName());</span><br><span class="line">        intent.putExtra(<span class="string">&quot;user_number&quot;</span>, login_data.getNumber());</span><br><span class="line"></span><br><span class="line">        startActivity(intent);</span><br><span class="line">        <span class="comment">// 关闭进度条</span></span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        msg.what = <span class="number">0</span>;</span><br><span class="line">        handler.sendMessage(msg);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>可以看到在上述代码中，一旦涉及到对于控件的处理，我就会向<code>Handler</code>发送<code> Message</code>。这是因为在安卓中，子线程不能对UI进行操作，UI的操作必须始终在主线程中进行。这样可以防止多线程同时对UI进行操作而产生错误的情况。因此在子线程中必须通过<code>Handler</code>来操作控件。</p><p>具体做法就是新建一个<code>Handler</code>，然后根据传入<code>Handler</code>的<code>Message</code>的值来对相应控件进行操作，比如对于上述登录进程的Handler是这样定义的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Handler handler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message message)</span> </span>&#123;</span><br><span class="line">        ProgressBar progressBar = findViewById(R.id.loading);</span><br><span class="line">        <span class="keyword">if</span> (message.what==<span class="number">0</span>) &#123;</span><br><span class="line">            Toast toast=Toast.makeText(getApplication(),<span class="string">&quot;登录成功！&quot;</span>,Toast.LENGTH_SHORT);</span><br><span class="line">            toast.show();</span><br><span class="line">            progressBar.setVisibility(View.GONE);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message.what==<span class="number">1</span>) &#123;</span><br><span class="line">            Toast toast=Toast.makeText(getApplication(),<span class="string">&quot;用户名或密码错误&quot;</span>,Toast.LENGTH_SHORT);</span><br><span class="line">            toast.show();</span><br><span class="line">            progressBar.setVisibility(View.GONE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json数据转换</title>
      <link href="2020/04/13/Json%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/04/13/Json%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在python中，json字符串和变量的转换是非常自然和简单的，只需要使用<code>json.dumps()</code>和<code>json.loads()</code>就可以进行转码和解码的操作。然而在按照或中转码和解码都是较为复杂的。</p></blockquote><h2 id="1-Json解码"><a href="#1-Json解码" class="headerlink" title="1. Json解码"></a>1. Json解码</h2><p>对于较为简单的数据格式，我们可以直接使用<code>com.alibaba.fastjson</code>工具包。</p><p>安装依赖：<code>implementation ‘com.alibaba:fastjson:1.1.54.android’</code></p><p>首先我们要根据传递的数据格式构建一个对应的类，注意一定要定义空的构造函数哦~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_001.data_form;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login_data</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String re;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Login_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 空构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Login_data</span><span class="params">(String number, String name, String re)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.re = re;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRe</span><span class="params">(String re)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.re = re;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以使用<code>JSON.parseObject()</code>或<code>JSON.parseArray()</code>对json字符串进行解码操作了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Login_data login_data = JSON.parseObject(login_data_text, Login_data.class);</span><br><span class="line">List&lt;Login_data&gt; login_datas = JSON.parseArray(login_data_text, Login_data.class);</span><br></pre></td></tr></table></figure><p>而对于比较复杂的数据结构，比如某个变量是列表的数据结构。上述方法往往无法成功进行解码。这时候就需要手动解析数据结构。<code>fastjson</code>提供<code>getString()</code>方法(即<code>get().toString()</code>)来从<code>JSONObject</code>对象中提取指定字段的值(通过冒号来判定)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">List&lt;JSONObject&gt; pre_classes_array = JSON.parseArray(pre_classes_text, JSONObject.class);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre_classes_array.size(); i++) &#123;</span><br><span class="line">    String class_name = pre_classes_array.get(i).getString(<span class="string">&quot;class_name&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> id = Integer.parseInt(pre_classes_array.get(i).getString(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    ArrayList&lt;String&gt; number = <span class="keyword">new</span> ArrayList&lt;&gt;(JSON.parseArray(pre_classes_array.get(i)</span><br><span class="line">            .getString(<span class="string">&quot;number&quot;</span>), String.class));</span><br><span class="line">    ArrayList&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;&gt;(JSON.parseArray(pre_classes_array.get(i)</span><br><span class="line">            .getString(<span class="string">&quot;name&quot;</span>), String.class));</span><br><span class="line">    pre_classes[i] = <span class="keyword">new</span> Pre_class(id, class_name, number, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pre_class 结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pre_class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String class_name;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; number;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pre_class</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pre_class</span><span class="params">(<span class="keyword">int</span> id, String class_name, ArrayList&lt;String&gt; number, ArrayList&lt;String&gt; name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.class_name = class_name;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pre_class</span><span class="params">(String class_name, String[] number, String[] name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.class_name = class_name;</span><br><span class="line">        <span class="keyword">this</span>.number = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(number));</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClass_name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> class_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定索引的学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getStudent</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a.add(number.get(i));</span><br><span class="line">        a.add(name.get(i));</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取整个预设班级的学生列表</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; getStudents() &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; name.size(); i++) &#123;</span><br><span class="line">            ArrayList&lt;String&gt; b = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            b.add(number.get(i));</span><br><span class="line">            b.add(name.get(i));</span><br><span class="line">            a.add(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Json转码"><a href="#2-Json转码" class="headerlink" title="2. Json转码"></a>2. Json转码</h2><p>相对于解码的复杂，转码就十分轻松了。我推荐使用Gson来进行。</p><p>首先添加依赖<code>implementation &#39;com.google.code.gson:gson:2.8.5&#39;</code>。</p><p>然后调用<code>toJson()</code>来进行转码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String strJson = gson.toJson(pre_class);</span><br></pre></td></tr></table></figure><hr><p>有了json的解码和转码方法， 就可以在前后端交互中使用一些具有复杂或者自定义结构的数据了，大大提高了开发的便利性。</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园每日一报自动填报脚本</title>
      <link href="2020/04/12/%E6%A0%A1%E5%9B%AD%E6%AF%8F%E6%97%A5%E4%B8%80%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%A1%AB%E6%8A%A5%E8%84%9A%E6%9C%AC/"/>
      <url>2020/04/12/%E6%A0%A1%E5%9B%AD%E6%AF%8F%E6%97%A5%E4%B8%80%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%A1%AB%E6%8A%A5%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近日冠状病毒肆虐，禁止入校，只能网课。学校为了安全，要求我们学生每天登录指定网站完成“每日一报”。但每日一报有着严格的时间限制，导致我每天都不能睡懒觉。不能睡懒觉，晚上就不能晚睡觉，这对于我可太致命了。于是我决定花五分钟在服务器上写一个脚本，每天自动帮我签到打卡。</p></blockquote><h2 id="1、selenium操作浏览器实现填报"><a href="#1、selenium操作浏览器实现填报" class="headerlink" title="1、selenium操作浏览器实现填报"></a>1、selenium操作浏览器实现填报</h2><h3 id="1、编写selenium脚本"><a href="#1、编写selenium脚本" class="headerlink" title="1、编写selenium脚本"></a>1、编写selenium脚本</h3><p>由于只是每天签到打卡，并不是很需要效率，因此选择可以完全模拟用户行为的selenium库来实现脚本。降低被发现和处理的风险，增加成功率。</p><p>以下是脚本的代码(python3):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daily_report</span>():</span></span><br><span class="line">    now_time = time.asctime(time.localtime(time.time()))</span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)     <span class="comment"># 禁止沙箱模式，否则肯能会报错遇到chrome异常</span></span><br><span class="line">    driver = webdriver.Chrome(executable_path=<span class="string">&quot;./chromedriver&quot;</span>, options=chrome_options)</span><br><span class="line">    driver.get(href_login)  <span class="comment"># 进入登录页面</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(driver.find_elements_by_name(<span class="string">&#x27;username&#x27;</span>)) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 检测是否有登录组件，如果之前登录过，则跳过当前操作</span></span><br><span class="line">        username = driver.find_element_by_name(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        pwd = driver.find_element_by_name(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        username.send_keys(USERNAME)</span><br><span class="line">        pwd.send_keys(PWD)</span><br><span class="line">        driver.find_element_by_name(<span class="string">&#x27;login_submit&#x27;</span>).click()</span><br><span class="line">    <span class="comment"># 登录完成</span></span><br><span class="line">    driver.get(href_page)</span><br><span class="line">    <span class="comment"># 进入每日一报页面</span></span><br><span class="line">    <span class="comment"># 输入每日一报信息，体温等</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;p1_ChengNuo-inputEl-icon&#x27;</span>).click()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;p1_TiWen-inputEl&#x27;</span>).send_keys(<span class="string">&#x27;36&#x27;</span>)</span><br><span class="line">    driver.find_element_by_class_name(<span class="string">&#x27;f-btn-text&#x27;</span>).click()</span><br><span class="line">    driver.find_elements_by_class_name(<span class="string">&#x27;f-btn-text&#x27;</span>)[-<span class="number">2</span>].click()</span><br><span class="line">    <span class="comment"># 完成提交</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">        <span class="comment"># 等待提交加载完毕，显示成功</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(driver.find_elements_by_class_name(<span class="string">&#x27;f-messagebox-message&#x27;</span>)) &gt; <span class="number">0</span>:</span><br><span class="line">            print(now_time+<span class="string">&#x27;:每日一报提交成功&#x27;</span>)</span><br><span class="line">            driver.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(<span class="string">&#x27;waiting&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 等待超时，等待五分钟后重试</span></span><br><span class="line">    print(now_time+<span class="string">&#x27;:每日一报提交失败，稍后重试&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">300</span>)</span><br><span class="line">    daily_report()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        daily_report()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 如果出现意料之外的错误，结束进程，并且打印错误</span></span><br><span class="line">        print(<span class="string">&quot;Unexpected error:&quot;</span>, sys.exc_info()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="2、使用crontab在服务器定时执行脚本"><a href="#2、使用crontab在服务器定时执行脚本" class="headerlink" title="2、使用crontab在服务器定时执行脚本"></a>2、使用crontab在服务器定时执行脚本</h3><p>crontab是centos自带的定时执行命令的程序。</p><p>我们可以使用<code>crontab [ -u user ] &#123; -l | -r | -e &#125;</code>来调用crontab命令。</p><p>其中，-e是执行编辑器编辑crontab配置，-l是列出目前的配置，-r则是删除当前的配置。</p><p>我们可以执行<code>crontab -e</code>来打开crontab配置，然后在新的一行输入</p><p><code>5 0 * * * cd /root/auto_task &amp;&amp; /usr/local/bin/python3 /root/auto_task/task1.py &gt;&gt; /root/auto_task/task_log.log</code></p><p>这段的意思是在每天的零时五分自动执行<code>cd /root/auto_task &amp;&amp; /usr/local/bin/python3 /root/auto_task/task1.py &gt;&gt; /root/auto_task/task_log.log</code>，即进入目录，用python3编译器执行第一步写好的脚本，并将输出结果传入到task_log.log中，方便排错。</p><hr><h2 id="2、利用requests库直接模拟请求"><a href="#2、利用requests库直接模拟请求" class="headerlink" title="2、利用requests库直接模拟请求"></a>2、利用requests库直接模拟请求</h2><blockquote><p>之前使用selenium进行了自动报到脚本的编写，但由于报到的页面经常会出现弹出消息，或者加载缓慢等问题。因此常常会出现自动报到失败的情况。因此为了提高脚本的成功率和效率，这次决定改用requests库来进行脚本的编写，直接和网页后端的接口进行对接，跳过前端的部分，降低意外的发生概率。</p></blockquote><h3 id="1-模拟登录"><a href="#1-模拟登录" class="headerlink" title="1. 模拟登录"></a>1. 模拟登录</h3><p>首先要通过用户名和密码获取登陆状态的cookie。通过chrome浏览器的F12找到登录接口。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/Inkedlogin%E6%8E%A5%E5%8F%A3_LI.jpg" alt="Inkedlogin接口_LI"></p><p>然后模仿接口的头部和body的字段，设定requests的字段来进行登录请求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: USERNAME,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: PWD,</span><br><span class="line">        <span class="string">&#x27;login_submit&#x27;</span>: <span class="string">&#x27;登录/Login&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;https://***&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://***/login&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    s = requests.Session()  <span class="comment"># 创建登录session</span></span><br><span class="line">    res = s.post(<span class="string">&#x27;https://***/login&#x27;</span>, data=data, headers=headers)</span><br></pre></td></tr></table></figure><p>由于登录以后会自动跳转页面，因此如果登录成功，状态码反而不会是200。而登录错误，页面不会跳转，只是会返回用户名密码错误，状态码还是200，所以可以通过这一点进行登录是否成功的判断。</p><p>cookie方面，由于使用了<code>requests.Session()</code>，因此会自动维护请求的cookie，不需要手动从response中获取并更新。</p><h3 id="2-模拟上传每日一报"><a href="#2-模拟上传每日一报" class="headerlink" title="2. 模拟上传每日一报"></a>2. 模拟上传每日一报</h3><p>接下来便可带着登录状态的cookie进行每日一报的上传，我们来看一下每日一报上传的字段。</p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%8A%A5%E6%8E%A5%E5%8F%A31.jpg" alt="每日一报接口1"></p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%8A%A5%E6%8E%A5%E5%8F%A32.jpg" alt="每日一报接口2"></p><p><img src="https://blogic-1256965470.cos.ap-shanghai.myqcloud.com/blog/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%8A%A5%E6%8E%A5%E5%8F%A33.jpg" alt="每日一报接口3"></p><p>我们可以看到，除了一些常用字段之外，字段中还有VIEWSTATE和F_STATE这种内容是一长串字符串的奇怪字段。经过调查，这两种字段其实都是FineUI的字段。都是用来进行验证和保存控件状态的。</p><p>对于VIEWSTATE，服务器端的返回内容中往往已经包含了。因此可以再post表单内容前，先对请求地址进行一次get，然后截取出其中的VIEWSTATE。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = s.get(<span class="string">&#x27;http://***/Default.aspx&#x27;</span>)</span><br><span class="line">res_text = s.get(<span class="string">&#x27;http://***n/DayReport.aspx&#x27;</span>).text</span><br><span class="line">view_state = re.findall(<span class="string">r&#x27;&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>, res_text, re.I)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>而对于F_STATE，其实是前端根据组件状态自动生成的字符串，因此无法从服务器端获取，但要自己生成对于一个小小的自动脚本来说成本又太高。好在由于F_STATE只是保存当前组件状态的字符串，因此只要表单上传内容不变，F_STATE内容也是不会发生变化的。因此我直接将服务器的F_STATE复制下来当做固定字段上传。而对于日期等每天会改变的字段则在常用字段中进行覆盖。</p><p>这样一来， 尽管F_STATE中可能包含一些过期的字段内容，但只要在明文的字段中进行覆盖，一样可以成功上传。</p><h3 id="3-完整代码"><a href="#3-完整代码" class="headerlink" title="3. 完整代码"></a>3. 完整代码</h3><p>下面是整个自动脚本的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daily_report</span>():</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: USERNAME,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: PWD,</span><br><span class="line">        <span class="string">&#x27;login_submit&#x27;</span>: <span class="string">&#x27;登录/Login&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;https://***&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;https://***/login&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    s = requests.Session()  <span class="comment"># 创建登录session</span></span><br><span class="line">    res = s.post(<span class="string">&#x27;https://***/login&#x27;</span>, data=data, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">500</span>:</span><br><span class="line">        res = s.get(<span class="string">&#x27;https://***/oauth/authorize&#x27;</span>)  <span class="comment"># 获取权限</span></span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">500</span>:</span><br><span class="line">            res = s.get(<span class="string">&#x27;http://***/Default.aspx&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">                res_text = s.get(<span class="string">&#x27;http://***/DayReport.aspx&#x27;</span>).text</span><br><span class="line">                <span class="comment"># print(res_text)</span></span><br><span class="line">                view_state = re.findall(<span class="string">r&#x27;&lt;input type=&quot;hidden&quot; name=&quot;__VIEWSTATE&quot; id=&quot;__VIEWSTATE&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>,</span><br><span class="line">                                        res_text, re.I)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment"># print(view_state)</span></span><br><span class="line">                data = &#123;</span><br><span class="line">                    <span class="string">&#x27;p1$ChengNuo&#x27;</span>: <span class="string">&#x27;p1_ChengNuo&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$DangQSTZK&#x27;</span>: <span class="string">&#x27;良好&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$TiWen&#x27;</span>: <span class="string">&#x27;36&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ZaiXiao&#x27;</span>: <span class="string">&#x27;不在校&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$MingTDX&#x27;</span>: <span class="string">&#x27;不到校&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$GuoNei&#x27;</span>: <span class="string">&#x27;国内&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlGuoJia$Value&#x27;</span>: <span class="string">&#x27;-1&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlGuoJia&#x27;</span>: <span class="string">&#x27;选择国家&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlSheng$Value&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlSheng&#x27;</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlShi$Value&#x27;</span>: <span class="string">&#x27;上海市&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlShi&#x27;</span>: <span class="string">&#x27;上海市&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlXian$Value&#x27;</span>: <span class="string">&#x27;宝山区&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$ddlXian&#x27;</span>: <span class="string">&#x27;宝山区&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$TongZWDLH&#x27;</span>: <span class="string">&#x27;否&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$XiangXDZ&#x27;</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$QueZHZJC$Value&#x27;</span>: <span class="string">&#x27;否&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$QueZHZJC&#x27;</span>: <span class="string">&#x27;否&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$DangRGL&#x27;</span>: <span class="string">&#x27;否&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$SuiSM&#x27;</span>: <span class="string">&#x27;绿色&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1$Address2&#x27;</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;F_TARGET&#x27;</span>: <span class="string">&#x27;p1_ctl00_btnSubmit&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1_GeLSM_Collapsed&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1_SuiSMSM_Collapsed&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;p1_Collapsed&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line"></span><br><span class="line">                    <span class="string">&#x27;p1$BaoSRQ&#x27;</span>: time.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>, time.localtime()),</span><br><span class="line">                    <span class="comment"># 必须参数</span></span><br><span class="line">                    <span class="string">&#x27;__EVENTTARGET&#x27;</span>: <span class="string">&#x27;p1$ctl00$btnSubmit&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;__VIEWSTATE&#x27;</span>: view_state,</span><br><span class="line">                    <span class="string">&#x27;F_STATE&#x27;</span>: fstate</span><br><span class="line">                &#125;</span><br><span class="line">                headers = &#123;</span><br><span class="line">                    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;selfreport.shu.edu.cn&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;origin&#x27;</span>: <span class="string">&#x27;http://***&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;referer&#x27;</span>: <span class="string">&#x27;http://***/DayReport.aspx&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;X-FineUI-Ajax&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                res = s.post(<span class="string">&#x27;http://***/DayReport.aspx&#x27;</span>, data=data, headers=headers)</span><br><span class="line">                <span class="comment"># print(res.text)</span></span><br><span class="line">                <span class="keyword">if</span> res.status_code != <span class="number">200</span>:</span><br><span class="line">                    <span class="keyword">raise</span> Exception(<span class="string">&quot;Wrong status_code:&quot;</span> + res.status_code, res.text)</span><br><span class="line">                <span class="keyword">return</span> re.findall(<span class="string">r&#x27;F\.alert\(\&#123;message:\&#x27;(.*?)\&#x27;,&#x27;</span>, res.text)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="4-crontab自动执行"><a href="#4-crontab自动执行" class="headerlink" title="4. crontab自动执行"></a>4. crontab自动执行</h3><p>crontab是centos自带的定时执行命令的程序。</p><p>我们可以使用<code>crontab [ -u user ] &#123; -l | -r | -e &#125;</code>来调用crontab命令。</p><p>其中，-e是执行编辑器编辑crontab配置，-l是列出目前的配置，-r则是删除当前的配置。</p><p>我们可以执行<code>crontab -e</code>来打开crontab配置，然后在新的一行输入</p><p><code>5 0 * * * cd /root/auto_task &amp;&amp; /usr/local/bin/python3 /root/auto_task/task2.py &gt;&gt; /root/auto_task/task_log.log</code></p><p>这段的意思是在每天的零时五分自动执行<code>cd /root/auto_task &amp;&amp; /usr/local/bin/python3 /root/auto_task/task2.py &gt;&gt; /root/auto_task/task_log.log</code>，即进入目录，用python3编译器执行上述写好的脚本，并将输出结果传入到task_log.log中，方便排错。</p><blockquote><p>我们每天往往都会不得不去做大量重复的任务，学会写脚本来帮助自己完成一些机械重复的每日任务吧！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> crontab </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS动画制作之transition</title>
      <link href="2019/10/24/CSS%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E4%B9%8Btransition/"/>
      <url>2019/10/24/CSS%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E4%B9%8Btransition/</url>
      
        <content type="html"><![CDATA[<p>transition是css的动画属性之一，用于设置元素的样式过渡。</p><h2 id="1、使用方法"><a href="#1、使用方法" class="headerlink" title="1、使用方法"></a>1、使用方法</h2><p>具体来说</p><ol><li><p>首先在元素的CSS中增加transition属性，在其中可以设置过渡动画的时长，可以为所有属性指定一个值，或者为不同属性指定不同时长</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0000FF</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>:width <span class="number">2s</span>, height <span class="number">2s</span>, </span><br><span class="line">        background-color <span class="number">2s</span>, -webkit-transform <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transition</span>:width <span class="number">2s</span>, height <span class="number">2s</span>, background-color <span class="number">2s</span>, transform <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">/*transition:2s*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置另一个CSS用于指定动画完成的状态，这样transition就会根据变化的CSS属性和时长执行动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FFCCCC</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述即box被鼠标覆盖后会触发:hover的伪类，从而生成长达2s的动画</p></li></ol><h2 id="2、使用实例"><a href="#2、使用实例" class="headerlink" title="2、使用实例"></a>2、使用实例</h2><p>我想要的不止如此，我希望可以在js中更加细致地控制动画的行程。</p><p>比如，点击图片触发js中的函数，触发图片翻转90度的动画，然后更改图片的src，再旋转图片90度，达到翻转后是一张全新图片的效果。</p><p>首先设置翻转前和翻转90度的CSS样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.susi</span>&#123;</span><br><span class="line">  <span class="comment">/*翻转前*/</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.susi</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.no_susi</span>&#123;</span><br><span class="line">  <span class="comment">/*翻转90度*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.5s</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后设置点击图片后触发的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hideImg () &#123;</span><br><span class="line">  <span class="built_in">this</span>.img_class = <span class="string">&#x27;no_susi&#x27;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.changeImg, <span class="number">500</span>)</span><br><span class="line">&#125;,</span><br><span class="line">changeImg () &#123;</span><br><span class="line">  <span class="built_in">this</span>.img_src = <span class="built_in">this</span>.img_src === susi ? alligator : susi</span><br><span class="line">  <span class="built_in">this</span>.img_class = <span class="string">&#x27;susi&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，具体来说就是手动改变图片使用的CSS类，从而触发transition动画。</p><p>然后等待0.5s动画执行结束，再改变动画src，恢复图片的CSS类。</p><hr><p>由于setTimeout()函数并非真正的精准计时，因此使用setTimeout()函数执行多段的动画难免会造成动画卡顿等问题，因此也可以使用@transitionend属性直接在动画结束的时候调用changeImg()。</p><p>但由于该元素绑定了多个动画，每个动画结束都会调用@transitionend的方法，导致无法达到想要的效果。且假如子元素有transition属性，甚至也会冒泡调用父元素的@transitionend。因此需要额外的操作来处理这一问题，比如需要单独定义一个变量，在调用@transitionend方法的时候通过该变量来判断要进行什么操作。</p><p>另外上述使用实例点击首页三文鱼图像即可触发。</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> transition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题</title>
      <link href="2019/10/16/LeetCode%E5%88%B7%E9%A2%98/"/>
      <url>2019/10/16/LeetCode%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1、公交站间的距离"><a href="#1、公交站间的距离" class="headerlink" title="1、公交站间的距离"></a>1、公交站间的距离</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>环形公交路线上有 n 个站，按次序从 0 到 n - 1 进行编号。我们已知每一对相邻公交站之间的距离，distance[i] 表示编号为 i 的车站和编号为 (i + 1) % n 的车站之间的距离。</p><p>环线上的公交车都可以按顺时针和逆时针的方向行驶。</p><p>返回乘客从出发点 start 到目的地 destination 之间的最短距离。</p><p><a href="https://leetcode-cn.com/problems/distance-between-bus-stops/">题目链接</a></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>最简单的思路是直接获得全部距离之和，然后求得其中一个方向的距离(选取经过车站数量少的以减少运算)，这样再通过求差获得另一个方向的距离然后进行比较，输出最小值；</p><p>我的方法是，两个方向同步前进。假如一个方向先到达了目标站点且距离较小则直接返回，否则继续沿另一个方向前进，直到另一个方向距离大于已走完的方向或者另一方向走完为止。</p><p>这样最好的情况是只计算了两段路程即可输出O(1)​，最坏情况也就O(n)​，与直接遍历一样。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distanceBetweenBusStops</span><span class="params">(<span class="keyword">int</span>[] distance, <span class="keyword">int</span> start, <span class="keyword">int</span> destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n1 = start; <span class="comment">// 顺时针的当前位置</span></span><br><span class="line">        <span class="keyword">int</span> n2 = start; <span class="comment">// 逆时针的当前位置</span></span><br><span class="line">        <span class="keyword">int</span> len = distance.length; <span class="comment">// 节点数量</span></span><br><span class="line">        <span class="keyword">int</span> re1 = <span class="number">0</span>; <span class="comment">// 顺时针距离</span></span><br><span class="line">        <span class="keyword">int</span> re2 = <span class="number">0</span>; <span class="comment">// 逆时针距离</span></span><br><span class="line">        <span class="keyword">while</span> (n1 != destination &amp;&amp; n2 != destination) &#123;</span><br><span class="line">            re1 += distance[n1];</span><br><span class="line">            n1 = (n1 + <span class="number">1</span>) % len;</span><br><span class="line">            re2 += distance[(n2 - <span class="number">1</span> + len) % len];</span><br><span class="line">            n2 = (n2 - <span class="number">1</span> + len) % len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n1 == destination) &#123;</span><br><span class="line">            <span class="keyword">if</span> (re1 &lt;= re2) <span class="keyword">return</span> re1; <span class="comment">// 顺时针已走到且比逆时针短</span></span><br><span class="line">            <span class="keyword">while</span> (n2 != destination) &#123; <span class="comment">// 逆时针继续前进</span></span><br><span class="line">                re2 += distance[(n2 - <span class="number">1</span> + len) % len];</span><br><span class="line">                <span class="keyword">if</span> (re2 &gt;= re1) <span class="keyword">return</span> re1; <span class="comment">// 顺时针短</span></span><br><span class="line">                n2 = (n2 - <span class="number">1</span> + len) % len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> re2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n2 == destination &amp;&amp; re2 &lt;= re1) <span class="keyword">return</span> re2;</span><br><span class="line">        <span class="keyword">while</span> (n1 != destination) &#123; <span class="comment">// 顺时针继续前进</span></span><br><span class="line">            re1 += distance[n1];</span><br><span class="line">            <span class="keyword">if</span> (re1 &gt;= re2) <span class="keyword">return</span> re2; <span class="comment">// 逆时针短</span></span><br><span class="line">            n1 = (n1 + <span class="number">1</span>) % len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> re1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、最小好进制"><a href="#2、最小好进制" class="headerlink" title="2、最小好进制"></a>2、最小好进制</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>对于给定的整数 n, 如果n的k（k&gt;=2）进制数的所有数位全为1，则称 k（k&gt;=2）是 n 的一个好进制。</p><p>以字符串的形式给出 n, 以字符串的形式返回 n 的最小好进制。</p><p><a href="https://leetcode-cn.com/problems/smallest-good-base/">题目链接</a></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先十进制转其他进制再判断是不是好进制肯定没有将各个长度的好进制直接与十进制进行大小比较效率高。因为后者由于是大小比较，可以使用中分查找大幅度减小计算资源的消耗。</p><p>其次，每个整数都必有好进制，最坏情况也必有n-1和n两个好进制。</p><p>我的思路是，从$⌊\log(n)/\log(2)⌋+1$长度开始，一直到3，对于每个长度的情况，都进行一次好进制的猜测。由于随着长度的减小，进制数是递增的，所以一旦检测到了好进制，便可以直接返回。如果没有遍历到，则返回长度为2的好进制n-1。</p><p>对于好进制的检测，由于有大小顺序，可以引入二分法来实现。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">smallestGoodBase</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> num = Long.parseLong(n); <span class="comment">// String to long</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = (<span class="keyword">int</span>)Math.floor(Math.log(num)/Math.log(<span class="number">2</span>)) + <span class="number">1</span>; len&gt;<span class="number">2</span>; len --) &#123;</span><br><span class="line">            <span class="comment">// 从长到短遍历所有长度的可能性</span></span><br><span class="line">            <span class="keyword">long</span> radix = getRadix(num, len);</span><br><span class="line">            <span class="keyword">if</span> (radix != -<span class="number">1</span>) <span class="keyword">return</span> String.valueOf(radix);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(num - <span class="number">1</span>); <span class="comment">// 最坏情况，进制是自身大小减一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getRadix</span> <span class="params">(<span class="keyword">long</span> num, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得num对应的len长度的进制数</span></span><br><span class="line">        <span class="keyword">long</span> left = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">long</span> right = num - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">long</span> mid = (<span class="keyword">long</span>)Math.floor((left + right) / <span class="number">2</span>);</span><br><span class="line">            <span class="comment">// 二分查找</span></span><br><span class="line">            <span class="keyword">if</span> (getSum(mid, len) == num) <span class="keyword">return</span> mid; <span class="comment">// 得到进制</span></span><br><span class="line">            <span class="keyword">if</span> (getSum(mid, len) &gt; num) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getSum(left, len) == num) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getSum</span> <span class="params">(<span class="keyword">long</span> radix, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Long.MAX_VALUE - sum &lt; p) &#123;     <span class="comment">// 防止溢出</span></span><br><span class="line">                <span class="keyword">return</span> Long.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += p;</span><br><span class="line">            <span class="keyword">if</span> (Long.MAX_VALUE / p &lt; radix) &#123;   <span class="comment">// 防止溢出</span></span><br><span class="line">                p = Long.MAX_VALUE;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p *= radix;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、岛屿数量"><a href="#3、岛屿数量" class="headerlink" title="3、岛屿数量"></a>3、岛屿数量</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。</p><p><a href="https://leetcode-cn.com/problems/number-of-islands/">题目链接</a></p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用感染函数，递归地将当前点和点周围的四个点感染。</p><p>具体来说就是判断是否为1，如果是说明是未感染的岛将他置为2，直到将当前点的所有关联点即一座岛都置为2，则一次感染结束，岛屿数量加一。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>; <span class="comment">// 岛的数量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    infect(grid, i, j);</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infect</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(grid.length &lt;= <span class="number">0</span> || i &lt; <span class="number">0</span> || i &gt;= grid.length || j &lt; <span class="number">0</span> || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] != <span class="string">&#x27;1&#x27;</span>) <span class="keyword">return</span>; <span class="comment">// 感染函数结束条件</span></span><br><span class="line">        grid[i][j] = <span class="string">&#x27;2&#x27;</span>; <span class="comment">// 感染该点</span></span><br><span class="line">        <span class="comment">// 感染周围</span></span><br><span class="line">        infect(grid, i-<span class="number">1</span>, j);</span><br><span class="line">        infect(grid, i+<span class="number">1</span>, j);</span><br><span class="line">        infect(grid, i, j+<span class="number">1</span>);</span><br><span class="line">        infect(grid, i, j-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用算法整理</title>
      <link href="2019/10/16/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>2019/10/16/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><blockquote><p>二分查找作为在有序集合中寻找指定元素的方法，性能是极其优异的，时间复杂度只有$O(\log(n))$。在算法题中使用可以大幅降低计算资源的消耗。</p></blockquote><p>二分查找的原理就是利用集合的有序性，每次选取给定集合的中间元素与目标元素进行大小的比较。</p><p>如果相等则直接返回，如果小于目标元素，则对于右半部分的集合重复上述操作，大于同理。</p><p>一直循环到找到元素为止。</p><p>最坏情况是到最后都没找到，一直到左右边界相等了，才得到目标值。</p><p>下面是二分查找的代码实现样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findBoundary</span> <span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 二分查找b在a中的位置</span></span><br><span class="line">    <span class="keyword">if</span> (a.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 空数组</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = a.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] == b) <span class="keyword">return</span> mid; <span class="comment">// bingo</span></span><br><span class="line">        <span class="keyword">if</span> (a[mid] &lt; b) &#123; <span class="comment">// b在右边</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> right = mid - <span class="number">1</span>; <span class="comment">// b在左边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a[left] == b) <span class="keyword">return</span> left; <span class="comment">// left==right</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// a中无b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>快速排序是算法题中常用的排序算法，在大数据量的情况下，他的排序性能要明显高于冒泡排序。</p></blockquote><p>快速排序的基本思想是：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><p>具体地来说：</p><ul><li>从数组中挑出一个元素作为<strong>基准</strong>；</li><li>重新排列数组，让所有比<strong>基准</strong>小的元素排在<strong>基准</strong>前面，其他元素排在<strong>基准</strong>后面；</li><li>递归地对基准左边和右边的子数组再次重复上述步骤直到子数组长度小于等于1时排序结束；</li></ul><p>以下是java实现快速代码的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span> <span class="params">(Integer[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 快速排序算法</span></span><br><span class="line">    <span class="keyword">if</span>(right - left &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> index = left+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = index; i &lt; right; i++) &#123; <span class="comment">// 小的放基准左边，大的放基准右边</span></span><br><span class="line">        <span class="keyword">if</span>(a[left] &gt; a[i]) &#123;</span><br><span class="line">            swap(a, index, i);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(a, index-<span class="number">1</span>, left);</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">    sort(a, left, index);</span><br><span class="line">    sort(a, index, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span> <span class="params">(Integer[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 交换a[i]和a[j]</span></span><br><span class="line">    Integer c = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><blockquote><p><strong>并查集</strong>是一种树型的数据结构，用于处理一些不交集（Disjoint Sets）的合并及查询问题。</p></blockquote><p><strong>并查集森林</strong>是一种集合的数据结构。其中每个节点都保存着它的父节点的引用。</p><p>在<strong>并查集森林</strong>中，每个分类的代表是该分类的<strong>根节点</strong>，即不断地寻找给定节点的父节点，直到找到父节点是其本身的根节点。</p><p>一开始，<strong>并查集森林</strong>中所有节点的父节点都是它本身，即所有节点都是根节点，然后每次”联合“，便需要将两个节点的根节点的其中一个的父节点指向另一个节点。</p><p>下述代码直接使用数组作为<strong>并查集森林</strong>的表示结构:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化并查集森林</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span>[] friend)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">0</span>; f &lt; friend.length; f++) &#123;</span><br><span class="line">    friend[f] = f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获得祖先</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getParent</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span>[] friend)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = friend[i];</span><br><span class="line">    <span class="keyword">if</span>(f == i) <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> getParent(f, friend);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 建立朋友</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFriend</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[] friend)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ii = getParent(i, friend);</span><br><span class="line">    <span class="keyword">int</span> jj = getParent(j, friend);</span><br><span class="line">    <span class="keyword">if</span>(ii == jj) <span class="keyword">return</span>;</span><br><span class="line">    friend[ii] = jj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法虽然可以实现最基础的<strong>并查集</strong>，但效率并比链表高。</p><p>比较常见的优化方法之一是<strong>路径优化</strong>，即在每次查找祖先的时候都将所有子节点的父节点直接指向祖先节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得祖先</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getParent</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span>[] friend)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = friend[i];</span><br><span class="line">    <span class="keyword">if</span>(f != i) friend[i] = getParent(f,friend);</span><br><span class="line">    <span class="keyword">return</span> friend[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><blockquote><p><strong>背包问题</strong>（Knapsack problem）是一种<a href="https://zh.wikipedia.org/wiki/%E7%BB%84%E5%90%88%E4%BC%98%E5%8C%96">组合优化</a>的<a href="https://zh.wikipedia.org/wiki/NP%E5%AE%8C%E5%85%A8">NP完全</a>问题。问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。问题的名称来源于如何选择最合适的物品放置于给定背包中。</p></blockquote><h3 id="1、无界背包问题"><a href="#1、无界背包问题" class="headerlink" title="1、无界背包问题"></a>1、无界背包问题</h3><blockquote><p>我们有n种物品，物品j的重量为wj，价格为pj。</p><p>我们假定所有物品的重量和价格都是非负的。背包所能承受的最大重量为W。</p><p>问在最大重量可达到的最高总价值？</p></blockquote><p>解决思路是从总重量不超过Y的最高价值$A(Y)$开始计算，不断提高Y最终得到$A(W)$。</p><ul><li>$A(0) = 0$</li><li>$A(Y) = max{ A(Y - 1), { pj + A(Y - wj) | wj ≤ Y } }$</li></ul><p>上述公式即:</p><ol><li><p>首先初始化$Y=0$的情况；</p></li><li><p>然后对于$Y + 1$，遍历所有物品；</p></li><li><p>对于每个物品，如果他的重量小于等于Y，则计算他放入背包后的总价值为<strong>物品价值</strong>加上<strong>总重量Y减去物品价值后的最高价值</strong>；</p></li><li><p>求得所有物品情况的最大总价值，并和总重量为Y的最高价值相比较，取最大值，作为总重量为$Y + 1$的最大价值；</p></li><li><p>重复步骤2~4，不断提高Y，直到$Y==W$，则算法结束，得到最高价值$A(W)$。</p></li></ol><p>下面是java代码的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> WEIGHT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>[] init() &#123;</span><br><span class="line">    <span class="comment">// 初始化重量为0的情况</span></span><br><span class="line">    <span class="keyword">int</span>[] bag = <span class="keyword">new</span> <span class="keyword">int</span>[WEIGHT+<span class="number">1</span>];</span><br><span class="line">    bag[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bag</span><span class="params">(<span class="keyword">int</span>[] bag, <span class="keyword">int</span>[] w, <span class="keyword">int</span>[] p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 背包问题解法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= WEIGHT; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>; <span class="comment">// 第四步的最大总价值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; w.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; w[j]) <span class="keyword">continue</span>;</span><br><span class="line">            max = Math.max(p[j] + bag[i-w[j]], max);</span><br><span class="line">        &#125;</span><br><span class="line">        bag[i] = Math.max(bag[i-<span class="number">1</span>], max);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="2、0-1背包问题"><a href="#2、0-1背包问题" class="headerlink" title="2、0-1背包问题"></a>2、0-1背包问题</h3><blockquote><p> 我们有n种物品，物品j的重量为wj，价格为pj。</p><p>我们假定所有物品的重量和价格都是非负的。背包所能承受的最大重量为W。</p><p>规定每种物品只能选0个或者1个。</p><p>问在最大重量可达到的最高总价值？</p></blockquote><p>解决思路也是从总重量不超过Y的最高价值$A(Y)$开始计算，不断提高Y最终得到$A(W)$。</p><p>只是对于每个$A(Y)$，需要依次计算前j种物品的最高总价值$A(Y, j)$</p><ul><li>$A(Y, 0) = 0$</li><li>如果$wj &gt; Y$, $A(Y, j) = A(Y, j - 1)$</li><li>如果$wj ≤ Y, A(Y, j) = max { A(Y, j - 1), pj + A(Y - wj, j - 1) }$</li></ul><p>上述公式即:</p><ol><li>首先初始化Y从0到W的所有前1种物品的最高价值，即$A(0, 1)$到$A(W, 1)$；</li><li>然后将Y从0到W进行遍历；</li><li>对于每个Y，遍历前2到前$w.length$种物品的情况，即$A(Y, 2)$到$A(Y, w.length)$；</li><li>对于总重量为Y、前i种物品的情况。如果第i种物品的重量$w(i)$小于等于总重量Y，则该情况的最大总价值$A(Y, i)$为前$i-1$种物品的的情况$A(Y, i-1)$和第i种物品价值加上<strong>总重量去除wi的前$i - 1$中物品的最高价值</strong>$A(Y - wi, i - 1)$</li><li>2~4步骤的双重遍历完成后便得到了最终的最高价值$A(W, w.length)$</li></ol><p>下面是java代码的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> WEIGHT = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[][] init(<span class="keyword">int</span>[] w, <span class="keyword">int</span>[] p) &#123;</span><br><span class="line">    <span class="comment">// 初始化前1种物品的情况的情况</span></span><br><span class="line">    <span class="keyword">int</span>[][] bag = <span class="keyword">new</span> <span class="keyword">int</span>[WEIGHT+<span class="number">1</span>][w.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= WEIGHT; i++) &#123;</span><br><span class="line">        bag[i][<span class="number">0</span>] = i &gt;= w[<span class="number">0</span>] ? p[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bag</span><span class="params">(<span class="keyword">int</span>[][] bag, <span class="keyword">int</span>[] w, <span class="keyword">int</span>[] p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 背包问题解法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= WEIGHT; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; w.length; j++) &#123;</span><br><span class="line">            bag[i][j] = i &gt;= w[j] ? Math.max(bag[i][j-<span class="number">1</span>], p[j] + bag[i-w[j]][j-<span class="number">1</span>]) : bag[i][j-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bag[WEIGHT][w.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
            <tag> 快速排序 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 背包算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2019/10/16/Java%E5%9F%BA%E7%A1%80/"/>
      <url>2019/10/16/Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1. 类型转换"></a>1. 类型转换</h1><blockquote><p>在算法题中经常需要进行类型的转换，这里总结常见的类型之间互相转换的方式</p></blockquote><ul><li><p>int to String</p><ul><li><p><code>String str = num + &quot;&quot;;</code></p></li><li><p><code>String str = String.valueOf(num);</code></p></li></ul></li><li><p>Integer to String</p><ul><li><code>String str = String.valueOf(i);</code></li></ul></li><li><p>String to int</p><ul><li><code>int num = Integer.parseInt(str);</code></li></ul></li><li><p>String to Integer</p><ul><li><code>Integer i = Integer.valueOf(str);</code></li></ul></li><li><p>Integer to int</p><ul><li><code>int num = i.intValue();</code></li></ul></li><li><p>int to Integer</p><ul><li><code>Integer i = new Integer(num);</code></li></ul></li><li><p>char to int</p><ul><li><code>int num = c - &#39;0&#39;; // 计算出和0的ACill值的差值</code></li></ul></li><li><p>int to char</p><ul><li><code>char c = num + &#39;0&#39;;</code><h1 id="2-访问控制权限"><a href="#2-访问控制权限" class="headerlink" title="2. 访问控制权限"></a>2. 访问控制权限</h1></li></ul></li></ul><p>​    Java中有四种权限，访问限制从大到小依次为private,default,protected,public。具体的访问权限范围可见如下表：</p><table><thead><tr><th align="center">权限</th><th align="center">类内</th><th align="center">同包</th><th align="center">异包子类</th><th align="center">异包非子类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h1 id="3-继承、接口和多态"><a href="#3-继承、接口和多态" class="headerlink" title="3. 继承、接口和多态"></a>3. 继承、接口和多态</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>​    继承就是保持已有类的特性而构造新类的过程。继承后子类能够使用父类中定义的变量和方法。</p><p>​    Java的继承是单继承，一个类只能同时拥有一个父类。如果想要让一个类同时继承多个父类的特性，可以选择串联继承，即A类作为B类的父类、B类作为C类的父类，这样C类就一定程度上拥有了A类和B类的特性。</p><p>​    继承的关键词是extends，不用该关键词则默认继承Object类。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>​    若想让一个类同时继承多个类，可以选择使用接口。当父类非常抽象的时候，我们可以选择将它定义为接口。接口只能定义静态变量和抽象方法且不需要定义构造函数，具体功能需要由子类去继承和扩展。</p><p>​    接口的定义关键词是interface，实现关键词是implements。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>​    多态指的是一个接口在传入不同实例时会执行不用的操作。原理就是当父类指向不同子类调用同一个方法的时候，会根据子类是否改写该方法来实现不同的功能（如果父类没有该方法则会报错）。具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Father constructor!&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> aa)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Father fun1:&quot;</span>+aa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">showA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Son constructor!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;son fun2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Daughter</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Daughter</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Daughter constructor!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> aa)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Daughter fun1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">super</span>.fun1(aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">funTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Father s = <span class="keyword">new</span> Son(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// This is Father constructor!</span></span><br><span class="line">        <span class="comment">// This is Son constructor!</span></span><br><span class="line">        Father d = <span class="keyword">new</span> Daughter(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// This is Father constructor!</span></span><br><span class="line">        <span class="comment">// This is Daughter constructor!</span></span><br><span class="line">        s.fun1(s.showA());</span><br><span class="line">        <span class="comment">// Father fun1:1</span></span><br><span class="line">        <span class="comment">// s.fun2();</span></span><br><span class="line">        <span class="comment">// 报错</span></span><br><span class="line">        d.fun1(d.showA());</span><br><span class="line">        <span class="comment">// Daughter fun1</span></span><br><span class="line">        <span class="comment">// Father fun1:2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-使用Collections-sort-排序"><a href="#4-使用Collections-sort-排序" class="headerlink" title="4. 使用Collections.sort()排序"></a>4. 使用Collections.sort()排序</h1><blockquote><p>在java中经常需要对list进行排序，而直接调用Collections.sort()相比手动写排序函数则要方便许多。本篇将详述该函数的使用方法。</p></blockquote><h2 id="1-Collections-sort-排序原理"><a href="#1-Collections-sort-排序原理" class="headerlink" title="1. Collections.sort()排序原理"></a>1. Collections.sort()排序原理</h2><p>​    事实上<code>Collections.sort()</code>方法底层就是调用的Arrays.sort方法，而Arrays.sort使用了两种排序方法，快速排序和优化的归并排序。</p><p>​    快速排序主要是对那些基本类型数据（int,short,long等）排序， 而归并排序用于对Object类型进行排序。<br>使用不同类型的排序算法主要是由于快速排序是不稳定的，而归并排序是稳定的。这里的稳定是指比较相等的数据在排序之后仍然按照排序之前的前后顺序排列。对于基本数据类型，稳定性没有意义，而对于Object类型，稳定性是比较重要的，因为对象相等的判断可能只是判断关键属性，最好保持相等对象的非关键属性的顺序与排序前一致；另外一个原因是由于归并排序相对而言比较次数比快速排序少，移动（对象引用的移动）次数比快速排序多，而对于对象来说，比较一般比移动耗时。<br>​    此外，对大数组排序。快速排序的sort()采用递归实现，数组规模太大时会发生堆栈溢出，而归并排序sort()采用非递归实现，不存在此问题。</p><p>​    具体来说，使用<code>Collections.sort()</code>排序首先先判断需要排序的数据量是否大于60：<br>​        <strong>小于60</strong>：使用插入排序，插入排序是稳定的<br>​        <strong>大于60</strong>：根据数据类型选择排序方式：<br>​            <strong>对于基本类型</strong>：使用快速排序。因为基本类型都是指向同一个常量池不需要考虑稳定性。<br>​            <strong>对于Object类型</strong>：使用归并排序。因为归并排序具有稳定性。<br>​    另外，不管是快速排序还是归并排序。在二分的时候小于60的数据量依旧会使用插入排序</p><p>​    所以，可以看出<code>Collections.sort()</code>是在对于所要排序的数据类型和大小进行了充分判断以后再选择最优的排序方法进行排序的。我们完全可以放心地把自己的数据交给他去排序而不用担心性能上有太大的问题。</p><h2 id="2-使用Collections-sort-来排序"><a href="#2-使用Collections-sort-来排序" class="headerlink" title="2. 使用Collections.sort()来排序"></a>2. 使用Collections.sort()来排序</h2><blockquote><p> 使用<code>Collections.sort()</code>要求被排序变量类型实现了Comparable接口或者有Comparator比较器。</p></blockquote><h3 id="实现Comparable接口"><a href="#实现Comparable接口" class="headerlink" title="实现Comparable接口"></a>实现Comparable接口</h3><p>首先在要排序的类中实现Comparable接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataForm</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">DataForm</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataForm</span><span class="params">(String name, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span>+name+<span class="string">&quot;--value:&quot;</span>+value; <span class="comment">// 重写转字符串方法，方便展示</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(DataForm a)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return value-a.getValue(); // 比较value大小，升序</span></span><br><span class="line"><span class="comment">//        return a.getValue()-value; // 比较value大小，降序</span></span><br><span class="line"><span class="comment">//        return value.compareTo(a.getValue()); // 调用Integer的compareTo进行比较，升序</span></span><br><span class="line">        <span class="keyword">return</span> a.getValue().compareTo(value); <span class="comment">// 调用Integer的compareTo进行比较，降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在代码中便可以直接使用<code>Collections.sort()</code>来对list进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;DataForm&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;d&quot;</span>, <span class="number">4</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;e&quot;</span>, <span class="number">5</span>));</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line"><span class="comment">// [name:a--value:1, name:b--value:2, name:c--value:3, name:d--value:4, name:e--value:5]</span></span><br><span class="line">Collections.sort(a);</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line"><span class="comment">// [name:e--value:5, name:d--value:4, name:c--value:3, name:b--value:2, name:a--value:1]</span></span><br></pre></td></tr></table></figure><h3 id="使用Comparator比较器"><a href="#使用Comparator比较器" class="headerlink" title="使用Comparator比较器"></a>使用Comparator比较器</h3><p>如果被比较的类没有实现Comparable接口，也可以在<code>Collections.sort()</code>的第二个参数位直接传入一个Comparator比较器来实现排序的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;DataForm&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;d&quot;</span>, <span class="number">4</span>));</span><br><span class="line">a.add(<span class="keyword">new</span> DataForm(<span class="string">&quot;e&quot;</span>, <span class="number">5</span>));</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line"><span class="comment">// [name:a--value:1, name:b--value:2, name:c--value:3, name:d--value:4, name:e--value:5]</span></span><br><span class="line">Collections.sort(a, <span class="keyword">new</span> Comparator&lt;DataForm&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(DataForm dataForm, DataForm t1)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// return dataForm.getValue()-t1.getValue(); // 比较value大小，升序</span></span><br><span class="line">        <span class="comment">// return t1.getValue()-dataForm.getValue(); // 比较value大小，降序</span></span><br><span class="line">        <span class="comment">// return dataForm.getValue().compareTo(t1.getValue()); // 调用Integer的compareTo进行比较，升序</span></span><br><span class="line">        <span class="keyword">return</span> t1.getValue().compareTo(dataForm.getValue()); <span class="comment">// 调用Integer的compareTo进行比较，降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line"><span class="comment">// [name:e--value:5, name:d--value:4, name:c--value:3, name:b--value:2, name:a--value:1]</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>使用Comparable还是Comparator在性能上并没有太大的差别。前者是在类内进行实现，完成以后该类边成为了一个可比较的类了。但需要修改源代码，在很多情况下并不通用。而后者不需要修改源代码，用户可以自己实现比较的逻辑，并且可复用。因此使用哪种方式还是取决于实际的使用环境。</p></blockquote><h1 id="5-Java多线程"><a href="#5-Java多线程" class="headerlink" title="5. Java多线程"></a>5. Java多线程</h1><blockquote><p>Java多线程的运用十分广泛，用好了可以大大提高程序的运行效率。但多线程之间往往会产生各种冲突，学会如何让多线程互相协作，高效率的完成工作，也是一门学问。本篇将持续更新，讲解自己在日常使用中了解到的多线程的经验和小窍门。</p></blockquote><h2 id="1-多线程基本语法"><a href="#1-多线程基本语法" class="headerlink" title="1. 多线程基本语法"></a>1. 多线程基本语法</h2><p>Java中的多线程主要有两种启动方法，直接继承<strong>Thread</strong>类并调用start()方法或者继承<strong>Runnable</strong>接口。</p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">thread_test</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        thread_test t = <span class="keyword">new</span> thread_test();</span><br><span class="line">        t.start();</span><br><span class="line">        t.start(); <span class="comment">// 报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Java<strong>单继承</strong>的特性，利用<strong>Thread</strong>操作多线程没有办法重复调用一个线程。因此程序的复用性较差。</p><h3 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h3><p><strong>Runnable</strong>接口则完全没有这方面的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">runnable_small_test</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        runnable_small_test t = <span class="keyword">new</span> runnable_small_test();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start(); <span class="comment">// 不会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-使用synchronized关键词来防止线程竞争同一资源"><a href="#2-使用synchronized关键词来防止线程竞争同一资源" class="headerlink" title="2. 使用synchronized关键词来防止线程竞争同一资源"></a>2. 使用synchronized关键词来防止线程竞争同一资源</h2><blockquote><p>如果有两个或两个以上线程同时对一个线程不安全的变量进行操作就可能出现不可预知的错误。比如同时对一个整型做<code>++1</code>的操作，可能该整型最后只进行了一次<code>++1</code>。对于这种情况，可以使用<code>synchronized</code>、<code>wait()</code>和<code>notify()</code>来增加同步块并控制线程的先后顺序防止出现竞选条件。</p></blockquote><p>下面是我使用<strong>Runnable</strong>接口来实现生产者与消费者的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">runnable_test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        product i = <span class="keyword">new</span> product(<span class="number">10</span>);</span><br><span class="line">        consume targetRunnable_consumer = <span class="keyword">new</span> consume(i);</span><br><span class="line">        produce targetRunnable_producer = <span class="keyword">new</span> produce(i);</span><br><span class="line">        <span class="keyword">new</span> Thread(targetRunnable_consumer, <span class="string">&quot;consumer&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(targetRunnable_producer, <span class="string">&quot;producer1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(targetRunnable_producer, <span class="string">&quot;producer2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">product</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">consume</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> product i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">consume</span><span class="params">(product i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i.i==<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        i.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i.i--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i.i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">produce</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> product i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">produce</span><span class="params">(product i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (i) &#123;</span><br><span class="line">                i.notify();</span><br><span class="line">                i.i++;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i.i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说，在<code>synchronized</code>规划的代码块中，他所指定的变量<strong>i</strong>只能有一个线程进行操作。</p><p>而<code>wait()</code>和<code>notify()</code>就类似<strong>PV操作</strong>，某线程如果调用了<code>wait()</code>，他就会陷入阻塞状态直到其他线程调用<code>notify()</code>了才能继续运行。多线程间可以通过这种方式来控制对于公共变量的访问顺序。</p><p>另外，每次使用<code>notify()</code>只会使一个调用了<code>wait()</code>的进程继续工作。如果有多个线程调用了<code>wait()</code>，你想一次性让他们都继续运作，可以使用<code>notifyall()</code>。</p><blockquote><p>值得注意的是，<code>synchronized</code>指定的同步变量不能是封装类，否则同步功能会失效。因为封装类提供了自动装箱的功能，在对封装类进行操作以后其实变量的HashCode已经发生了变化，synchronized自然也不是同一个对象实例，Integer的源码，如下所示：</p></blockquote><blockquote><p><img src="http://dl.iteye.com/upload/picture/pic/137529/c092c1c9-e167-3132-b865-2f4778b7d91b.png" alt="img"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> thread </tag>
            
            <tag> collections </tag>
            
            <tag> extends </tag>
            
            <tag> interface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试抱佛脚</title>
      <link href="2019/10/15/%E7%AC%94%E8%AF%95%E6%8A%B1%E4%BD%9B%E8%84%9A/"/>
      <url>2019/10/15/%E7%AC%94%E8%AF%95%E6%8A%B1%E4%BD%9B%E8%84%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="1、十进制转二进制"><a href="#1、十进制转二进制" class="headerlink" title="1、十进制转二进制"></a>1、十进制转二进制</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入十进制，转化为二进制输出</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>用位运算符，从十进制数个位开始一次和1做与操作，并将结果逆序输出即可。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 十进制转二进制 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">long</span> input = in.nextLong(); <span class="comment">// 输入十进制数</span></span><br><span class="line">        <span class="keyword">var</span> re = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(input != <span class="number">0</span>) &#123;</span><br><span class="line">            re.add((<span class="keyword">int</span>)input&amp;<span class="number">1</span>);</span><br><span class="line">            input&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = re.size()-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(re.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、洒毒液"><a href="#2、洒毒液" class="headerlink" title="2、洒毒液"></a>2、洒毒液</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>洒毒液，每洒一次会在地上覆盖一定面积，重复面积只算一次，求毒液的总面积。</p><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="comment">// 代表洒几次</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="comment">// 代表从起始坐标(0,0)开始，洒出边唱为2的正方形，毒液向右上方蔓延</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="comment">// 从(1,1)向右上方洒出边长为2的正方形</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="comment">// 毒液面积</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于坐标和边长都是离散值，因此这里直接将毒液覆盖的点不重合地存储在变量中，最后在计算出所有点的数量即可。</p><h3 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 洒毒液 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">var</span> num = in.nextInt(); <span class="comment">// 洒毒液数量</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">new</span> <span class="keyword">int</span>[num];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> points = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="comment">// 毒液覆盖点集</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 录入信息</span></span><br><span class="line">        <span class="keyword">while</span>(num-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x[i] = in.nextInt();</span><br><span class="line">            y[i] = in.nextInt();</span><br><span class="line">            len[i] = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> cm = y[i]+len[i];</span><br><span class="line">            <span class="keyword">if</span>(cm &gt; max) max = cm; <span class="comment">// 求毒液覆盖最大横轴长度</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = i-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = x[i]; j &lt; x[i]+len[i]; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = y[i]; k &lt; y[i]+len[i]; k++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> c = j*max+k;</span><br><span class="line">                    <span class="keyword">if</span>(points.contains(c)) <span class="keyword">continue</span>;</span><br><span class="line">                    points.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(points.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、朋友圈"><a href="#3、朋友圈" class="headerlink" title="3、朋友圈"></a>3、朋友圈</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>找队友，如果A和B时队友，B和C时队友，则A和C是队友，随机抽取2个人，判断是否为队友。</p><p>输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="comment">// 输入朋友对数量</span></span><br><span class="line">a b <span class="comment">// 朋友对</span></span><br><span class="line">b c</span><br><span class="line">d f</span><br><span class="line">a f <span class="comment">// 判断是否为队友</span></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用set特性将输入朋友去重并转为list来标号。</p><p>然后利用并查集的思想对员工进行分组。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 朋友圈 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">var</span> num = in.nextInt(); <span class="comment">// 关联数量</span></span><br><span class="line">        <span class="keyword">var</span> inputSet = <span class="keyword">new</span> HashSet&lt;String&gt;(); <span class="comment">// 记录员工</span></span><br><span class="line">        <span class="keyword">var</span> relation = <span class="keyword">new</span> String[num][<span class="number">2</span>]; <span class="comment">// 记录好友关系</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>; <span class="comment">// 好友关系下标</span></span><br><span class="line">        <span class="keyword">while</span>(num-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String a = in.next();</span><br><span class="line">            String b = in.next();</span><br><span class="line">            inputSet.add(a);</span><br><span class="line">            inputSet.add(b);</span><br><span class="line">            relation[index][<span class="number">0</span>] = a;</span><br><span class="line">            relation[index][<span class="number">1</span>] = b;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        String aa = in.next();</span><br><span class="line">        String bb = in.next(); <span class="comment">// aa和bb是否为队友</span></span><br><span class="line">        <span class="keyword">var</span> inputList = <span class="keyword">new</span> ArrayList&lt;&gt;(inputSet);</span><br><span class="line">        <span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="keyword">int</span>[inputList.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">0</span>; f &lt; friend.length; f++) &#123;</span><br><span class="line">            <span class="comment">// 初始化</span></span><br><span class="line">            friend[f] = f;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String[] r:relation) &#123;</span><br><span class="line">            addFriend(inputList.indexOf(r[<span class="number">0</span>]), inputList.indexOf(r[<span class="number">1</span>]), friend);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getParent(inputList.indexOf(aa), friend) == getParent(inputList.indexOf(bb), friend));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获得祖先</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getParent</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span>[] friend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> f = friend[i];</span><br><span class="line">        <span class="keyword">if</span>(f == i) <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> getParent(f, friend);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 建立朋友</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addFriend</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span>[] friend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ii = getParent(i, friend);</span><br><span class="line">        <span class="keyword">int</span> jj = getParent(j, friend);</span><br><span class="line">        <span class="keyword">if</span>(ii == jj) <span class="keyword">return</span>;</span><br><span class="line">        friend[ii] = jj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、进制均值"><a href="#4、进制均值" class="headerlink" title="4、进制均值"></a>4、进制均值</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>尽管是一个CS专业的学生，小B的数学基础很好并对数值计算有着特别的兴趣，喜欢用计算机程序来解决数学问题。现在，她正在玩一个数值变换的游戏。她发现计算机中经常用不同的进制表示同一个数，如十进制数123表达为16进制时只包含两位数7、11（B），用八进制表示时为三位数1、7、3。按不同进制表达时，各个位数的和也不同，如上述例子中十六进制和八进制中各位数的和分别是18和11。小B感兴趣的是，一个数A如果按2到A-1进制表达时，各个位数之和的均值是多少？她希望你能帮她解决这个问题？所有的计算均基于十进制进行，结果也用十进制表示为不可约简的分数形式。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先获取输入A的n进制转化结果，通过将A依次除n取余，边可得到A的n进制从低位到高位各位的数值；</p><p>然后将各位数值求和便可得到A的n进制各个位数的和；</p><p>再将从2到A-1各个和相加便可得到分子的值sum；</p><p>分母的值便是2到A-1的进制数量$(A-2)$；</p><p>最后通过<a href="https://zh.wikipedia.org/wiki/%E8%BC%BE%E8%BD%89%E7%9B%B8%E9%99%A4%E6%B3%95#%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0">欧几里得算法</a>来求得分子和分母的最大公约数；</p><p>分母分子同时除以公约数后便可得到结果；</p><h3 id="实现代码-2"><a href="#实现代码-2" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> input = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 分子</span></span><br><span class="line">            <span class="keyword">int</span> delta = input - <span class="number">2</span>; <span class="comment">// 分母</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; input; i++) &#123;</span><br><span class="line">                sum += getSum(input, i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> gcd = getGcd(sum, delta); <span class="comment">// 求最大公约数</span></span><br><span class="line">            System.out.println(String.valueOf(sum/gcd) + <span class="string">&#x27;/&#x27;</span> + delta/gcd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> input, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 计算n进制各位和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; <span class="comment">// 和</span></span><br><span class="line">        <span class="keyword">while</span> (input &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           sum += input % n;</span><br><span class="line">           input /= n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getGcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 求最大公约数</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">if</span> (a % b == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">return</span> getGcd(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、竞赛组队"><a href="#5、竞赛组队" class="headerlink" title="5、竞赛组队"></a>5、竞赛组队</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>在ACM-ICPC竞赛中，一支队伍由三名队员组成，现在有N+M名学生，其中的N名学生擅长算法，剩下的M名学生擅长编程，这些学生打算组队参加ACM-ICPC竞赛，他们的教练要求每支队伍至少有一名擅长算法的学生和一名擅长编程的学生，那么这些学生最多能组成多少支队伍呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="comment">// 输入两个整数N和M，1&lt;=N，M&lt;=10^9</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">3</span> <span class="comment">/// 输出最多能组成的队伍数</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><p>采用贪心算法的思想，每次首先擅长算法和擅长编程的学生各取一名；</p><p>然后在剩余学生中多的种类中再取一名；</p><p>直到学生数量无法满足要求，输出结果；</p><h3 id="实现代码-3"><a href="#实现代码-3" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> N = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span> M = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 队伍数量</span></span><br><span class="line">        <span class="keyword">while</span> (N &gt;<span class="number">0</span> &amp;&amp; M &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            N--;</span><br><span class="line">            M--;</span><br><span class="line">            <span class="keyword">if</span> (N == <span class="number">0</span> &amp;&amp; M == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (N &lt;= M) &#123;</span><br><span class="line">                M--;</span><br><span class="line">            &#125; <span class="keyword">else</span> N--;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#6 3、小明考试</p><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明同学在参加一场考试，考试时间2个小时，试卷上一共有n道题目，小明要在规定时间内，完成一定数量的题目。</p><p>考试中不限制试题作答顺序，对于第i道题目，小明有三种不同的策略可以选择：</p><ol><li>直接跳过这道题目，不花费时间，本题得0分。</li><li>只做一部分题目，花费pi分钟的时间，本题可得ai分。</li><li>做完整个题目，花费qi分钟的时间，本题可得bi分。</li></ol><p>小明想知道，他最多能得到多少分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="number">4</span> <span class="comment">// 第一行输入一个n数表示题目的数量</span></span><br><span class="line"><span class="comment">// 接下来n行，每行四个数pi,ai,qi,bi。(1&lt;=n&lt;=100,1&lt;=pi&lt;=qi&lt;=120,0&lt;=ai&lt;=bi&lt;=1000)</span></span><br><span class="line"><span class="number">20</span> <span class="number">20</span> <span class="number">100</span> <span class="number">60</span></span><br><span class="line"><span class="number">50</span> <span class="number">30</span> <span class="number">80</span> <span class="number">55</span></span><br><span class="line"><span class="number">100</span> <span class="number">60</span> <span class="number">110</span> <span class="number">88</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">10</span> <span class="number">6</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">94</span> <span class="comment">// 输出一个数，小明的最高得分</span></span><br><span class="line"><span class="comment">// 样例中，小明花110分钟做第三题，得88分，花10分钟做最后一题，得6分。</span></span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>这是一个典型的<a href="https://zh.wikipedia.org/wiki/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98">0-1背包问题</a>，可以将时间看做背包问题中的重量，分数看做价值。</p><p>区别在于本题需要选择是做一部分题还是做完整个题目，需要在每次迭代的时候选择得分更高的情况。</p><h3 id="实现代码-4"><a href="#实现代码-4" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> TIME = <span class="number">120</span>; <span class="comment">// 考试总时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt(); <span class="comment">// 题目数量</span></span><br><span class="line">        <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] q = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            p[i] = in.nextInt();</span><br><span class="line">            a[i] = in.nextInt();</span><br><span class="line">            q[i] = in.nextInt();</span><br><span class="line">            b[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] bag = init(p, a, q, b); <span class="comment">// 初始化0-1背包</span></span><br><span class="line">        bag(bag, p, a, q, b); <span class="comment">// 背包算法</span></span><br><span class="line">        System.out.println(bag[TIME][n-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] init(<span class="keyword">int</span>[] p, <span class="keyword">int</span>[] a, <span class="keyword">int</span>[] q, <span class="keyword">int</span>[] b) &#123;</span><br><span class="line">        <span class="comment">// 初始化0-1背包只有第一种物品情况的值</span></span><br><span class="line">        <span class="keyword">int</span>[][] bag = <span class="keyword">new</span> <span class="keyword">int</span>[TIME+<span class="number">1</span>][p.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= TIME; i++) &#123;</span><br><span class="line">            bag[i][<span class="number">0</span>] = p[<span class="number">0</span>] &gt; i ? <span class="number">0</span> : a[<span class="number">0</span>];</span><br><span class="line">            bag[i][<span class="number">0</span>] = i &gt;= q[<span class="number">0</span>] &amp;&amp; b[<span class="number">0</span>] &gt; a[<span class="number">0</span>] ? b[<span class="number">0</span>] : bag[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bag</span><span class="params">(<span class="keyword">int</span> [][] bag, <span class="keyword">int</span>[] p, <span class="keyword">int</span>[] a, <span class="keyword">int</span>[] q, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 背包问题解法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= TIME; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; p.length; j++) &#123;</span><br><span class="line">                bag[i][j] = i &gt;= p[j] ? Math.max(bag[i][j-<span class="number">1</span>], a[j] + bag[i-p[j]][j-<span class="number">1</span>]) : bag[i][j-<span class="number">1</span>];</span><br><span class="line">                bag[i][j] = i &gt;= q[j] ? Math.max(bag[i][j], b[j] + bag[i-q[j]][j-<span class="number">1</span>]) : bag[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、农场的鸡"><a href="#7、农场的鸡" class="headerlink" title="7、农场的鸡"></a>7、农场的鸡</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>n个农场，第i个农场有a[i]只鸡，每天每个农场都会增加k只鸡。每晚农场主都会选择鸡最多的农场，将该农场鸡的个数除以2向下取整，在m天后剩下多少只鸡？</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>第一反应很容易想到跟着题目的意思每次增加鸡，然后找最大去鸡。但很快就会意识到每天增加的鸡都一样，对于农场之间鸡数量大小关系不会有影响，所以可以把这部分移到最后求和的时候一起做。这样每天就只需要减少鸡最多农场相应的鸡的数量即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">100</span> <span class="comment">// n,m,k</span></span><br><span class="line"><span class="number">100</span> <span class="number">200</span> <span class="number">400</span> <span class="comment">// a[i]</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="number">925</span></span><br></pre></td></tr></table></figure><h3 id="实现代码-5"><a href="#实现代码-5" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc  = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> k = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] a= <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            a[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxIndex = findMax(a);</span><br><span class="line">            <span class="keyword">int</span> maxA = a[maxIndex];</span><br><span class="line">            <span class="keyword">int</span> middle = maxA+i*k;</span><br><span class="line">            <span class="keyword">int</span> delta = middle-middle/<span class="number">2</span>; <span class="comment">// 求上界</span></span><br><span class="line">            a[maxIndex]-=delta;</span><br><span class="line">            System.out.println(Arrays.toString(a));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum+=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum+=m*k*n; <span class="comment">// 统一加上累计的鸡</span></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMax</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 寻找数组的最大值</span></span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; max) &#123;</span><br><span class="line">                max = a[i];</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 背包算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化网站加载速度</title>
      <link href="2019/10/06/%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
      <url>2019/10/06/%E4%BC%98%E5%8C%96%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>虽然博客成功部署了，但在第一次访问的时候需要分钟级别的加载时间，甚至给人一种网站出问题上不去的感觉，所以提升网站的访问速度势在必行。</p><h2 id="1、提升宽带"><a href="#1、提升宽带" class="headerlink" title="1、提升宽带"></a>1、提升宽带</h2><p>第一种方法自然是直接的提升硬件的网速。然而看了眼提升宽带的价格，再看看自己的钱包，还是放弃了。</p><h2 id="2、gzip压缩"><a href="#2、gzip压缩" class="headerlink" title="2、gzip压缩"></a>2、gzip压缩</h2><p>gzip是一种压缩文件格式，使用他可以大幅压缩服务器文件大小(3-10倍)。从而缩短浏览器从服务器下载资源的时间。</p><p>首先，进入vue的配置文件config/index.js，调整配置项<code>productionGzip</code>为<code>true</code>，同时还要下载配置项上面注释中的插件:<code>npm install --save-dev compression-webpack-plugin</code>。</p><p>然后进入服务器中的nginx配置文件nginx.config，我的配置文件位置在/etc/nginx下。将其中的<code>gzip</code>配置项置为true，一下是我的gzip配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gzip  on;</span><br><span class="line"></span><br><span class="line">  gzip_proxied any;</span><br><span class="line"></span><br><span class="line">  gzip_min_length 512;</span><br><span class="line"></span><br><span class="line">  gzip_buffers   16 8k;</span><br><span class="line"></span><br><span class="line">  gzip_http_version 1.1;</span><br><span class="line"></span><br><span class="line">  gzip_comp_level 5;</span><br><span class="line"></span><br><span class="line">  gzip_types   text&#x2F;html application&#x2F;json text&#x2F;plain application&#x2F;x-javascript text&#x2F;css  text&#x2F;xml application&#x2F;xml application&#x2F;xml+rss text&#x2F;javascript;</span><br><span class="line"></span><br><span class="line">  gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">  gzip_vary on;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想要了解每个配置项的具体含义和取值请访问<a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html">gzip for nginx</a></p><p>经过了gzip的压缩后，我的静态文件都变成了.gz的压缩形式，对于支持gzip的浏览器来说，访问速度都得到了一定的提升。</p><h2 id="3、cdn引入"><a href="#3、cdn引入" class="headerlink" title="3、cdn引入"></a>3、cdn引入</h2><p>尽管gzip压缩使我的网页访问速度得到了质的提升，但他的访问速度依旧不理想，差不多处于<em>怀疑网站有问题</em>和<em>网站访问好慢</em>之间。</p><p>我希望能够进一步提升网页的访问速度，于是查看了访问网页时后端返回的文件，发现有一个交vendor.js的文件尤其的大，浏览器光是加载他就花费了将近15s的时间。事实上，绝大部分的读取时间都用来加载了这个js文件了。</p><p>google之后得知这个文件存储的是在项目中引入的第三方库。于是为了减少这些文件的大小，我决定不在向本地引入这些库。而改用cdn的方式引入，既缩短了网页的访问速度，又节省了服务器的带宽。</p><p>首先要在frontend/build/webpack.base.conf.js中改写如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  externals: &#123;</span><br><span class="line">    <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ElementUI&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;highlight.js&#x27;</span>: <span class="string">&#x27;hljs&#x27;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>其中<code>externals</code>配置项是新增的，用来告诉机器这些包不用引入。值得注意的是，配置项中冒号左边的是第三方库名，是固定不变的，而右边则是这些库在项目中的别名，需要注意和项目中的别名保持一致，如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> <span class="comment">// vuex</span></span><br><span class="line"><span class="comment">//对应于</span></span><br><span class="line"><span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就是在入口html文件中使用<code>&lt;script&gt;</code>引入第三方js，使用<code>&lt;link&gt;</code>引入第三方css。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/favicon.ico&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/favicon.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;Bookmark&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.12.0/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>大头博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;#    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>#&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.1.3/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.12.0/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vuex/3.1.1/vuex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/highlight.js/9.15.10/highlight.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意需要将main.js中的<code>Vue.use(ElementUI)</code>去除，据说留着他机器依旧会将elementui引入本地。</p><p>这样一来，由于本地的第三方库大幅减少，vendor.js的大小也相应地减少了700+kb，可喜可贺可喜可贺。</p><h2 id="4、动态导入"><a href="#4、动态导入" class="headerlink" title="4、动态导入"></a>4、动态导入</h2><p>经过上一步的优化，浏览器的初次加载速度给人的感觉已经基本上是访问速度还可以接受的程度了。但我希望我的博客访问速度可以和百度一样，给人嗖——一下的感觉。</p><p>于是决定将需要加载的组件按需、分时加载，从而将加载的时间碎片化，缩短每次加载的时间。</p><p>需要做到这一点非常简单，只需要将组件导入的方式改为动态导入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blog <span class="keyword">from</span> <span class="string">&#x27;@/views/pages/blog&#x27;</span> <span class="comment">// 静态导入</span></span><br><span class="line"><span class="keyword">const</span> blog = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/pages/blog&#x27;</span>) <span class="comment">// 动态导入</span></span><br></pre></td></tr></table></figure><p>完成！</p><h2 id="5、异步组件显示加载状态"><a href="#5、异步组件显示加载状态" class="headerlink" title="5、异步组件显示加载状态"></a>5、异步组件显示加载状态</h2><p>经过上一步的优化，我将各个页面组件的加载分了开来，使得用户从进入首页等待较长的时间变为了，用户每次点击进入新页面都需要等待较短的时间，大幅提升了用户的体验。可以说已经基本实现了嗖——一下的目标了。</p><p>但是有些页面还是有可能会加载5s的时间，给用户浏览网页的节奏造成阻塞。于是在组件加载的时候增加加载页面给予用户一定的操作反馈。</p><p>由于组件加载的时候，created函数还不会执行，因此在组件中增加加载是无意义的。于是采用了异步组件的方法。</p><p>具体来说，就是基于Vue动态组件工厂函数来声明一个返回Promise的方法，然后传入路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AsyncHandler = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class="line">    component: AsyncView,</span><br><span class="line">    <span class="comment">// 异步组件加载时使用的组件</span></span><br><span class="line">    loading: <span class="built_in">require</span>(<span class="string">&#x27;@/components/public/RouteLoading.vue&#x27;</span>).default,</span><br><span class="line">    <span class="comment">// 加载失败时使用的组件</span></span><br><span class="line">    error: <span class="built_in">require</span>(<span class="string">&#x27;@/components/public/RouteError.vue&#x27;</span>).default,</span><br><span class="line">    <span class="comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class="line">    delay: <span class="number">200</span>,</span><br><span class="line">    <span class="comment">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class="line">    <span class="comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class="line">    timeout: <span class="number">60000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;</span><br><span class="line">    functional: <span class="literal">true</span>,</span><br><span class="line">    render (h, &#123; data, children &#125;) &#123;</span><br><span class="line">      <span class="keyword">return</span> h(AsyncHandler, data, children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> blog = <span class="function">() =&gt;</span> lazyLoadView(<span class="keyword">import</span>(<span class="string">&#x27;@/views/pages/blog&#x27;</span>))</span><br></pre></td></tr></table></figure><hr><p>经过上面的几步操作，我的网页初次加载速度大幅提升，已经基本达到了和百度一样嗖——一下的效果了。当然这不代表网页的优化仅此而已了，百度等大型网站进入页面需要加载的东西远远超过了我的博客。因此优化与需要考虑的东西也肯定更多。希望大家可以从我的优化历程中获取优化自己网站或者服务器的思路。</p>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gzip </tag>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客部分功能实现</title>
      <link href="2019/09/30/%E5%8D%9A%E5%AE%A2%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/09/30/%E5%8D%9A%E5%AE%A2%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>主要记录博客建立的小功能和小心得</p><h2 id="监听路由变化"><a href="#监听路由变化" class="headerlink" title="监听路由变化"></a>监听路由变化</h2><p>尽管我博客的路由会随着类别的变化而变化，但现实博客内容的组件却始终没有改变，因此路由的切换不会使该组件再次调用created钩子函数，造成博客内容不更新的问题。尝试通过监听路由的变化来手动更新博客内容。</p><p>在博客内容组件中加入watch函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">&#x27;$route&#x27;</span> () &#123; <span class="comment">// 监听路由变化</span></span><br><span class="line">    <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">    that.init()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="built_in">this</span>.init()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="markdown-amp-代码高亮"><a href="#markdown-amp-代码高亮" class="headerlink" title="markdown&amp;代码高亮"></a>markdown&amp;代码高亮</h2><p>为了使博客内容编写起来更方便和美观，我引入了markdown的vue插件，并增加了代码高亮插件。</p><p>首先安装vue-markdown：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-markdown --save</span><br></pre></td></tr></table></figure><p>然后安装highlight.js增加代码高亮功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install highlight.js --save</span><br></pre></td></tr></table></figure><p>然后在程序入口文件main.js中增加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码高亮</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;highlight.js/styles/googlecode.css&#x27;</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;highlight&#x27;</span>, <span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> blocks = el.querySelectorAll(<span class="string">&#x27;pre code&#x27;</span>)</span><br><span class="line">  blocks.forEach(<span class="function">(<span class="params">block</span>) =&gt;</span> &#123;</span><br><span class="line">    hljs.highlightBlock(block)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最后由于我的博客虽然内容一直在变化，但组件始终是一个，不随路由变化而更新，所以切换后的markdown内容往往没有代码高亮效果，因此每次切换博客内容时需要手动刷新组件，我通过v-if值得变化来实现组件的刷新，但并没有效果，推测是组件重新加入dom流这个操作放在了组件渲染前，所以无效，因此加入了nextTick的钩子函数，来达到手动刷新组件启动代码高亮功能的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vue-markdown</span> <span class="attr">:source</span>=<span class="string">&quot;compiledMarkdown&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;markdownRefresh&quot;</span> <span class="attr">v-highlight</span>&gt;</span><span class="tag">&lt;/<span class="name">vue-markdown</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.markdownRefresh = <span class="literal">false</span></span><br><span class="line"><span class="built_in">this</span>.compiledMarkdown = ...</span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.markdownRefresh = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="router-view的使用"><a href="#router-view的使用" class="headerlink" title="router-view的使用"></a>router-view的使用</h2><p>在项目中我有时会希望在组件中嵌套组件，并且希望子组件随着路由的变化而变化，比如我希望导航栏始终存在，而导航栏下的内容会随着路由的变化而变化。这个时候就可以使用<a href="https://router.vuejs.org/zh/guide/essentials/nested-routes.html">router-view</a>。</p><p>我们可以通过路由信息(routes.js)中的children来配置子路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  redirect: &#123; <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span> &#125;,</span><br><span class="line">  component: nav,</span><br><span class="line">  children: [</span><br><span class="line">    <span class="comment">// 首页</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        title: <span class="string">&#x27;大头博客的首页&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      component: _import(<span class="string">&#x27;pages/index&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样页面的router-view标签中的内容就会随着路由跳转到’/index’而变化，而外层的组件则不会消除：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">ref</span>=<span class="string">&quot;homePage&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;min-width: 650px;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-active</span>=<span class="string">&quot;activeIndex&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;horizontal&quot;</span> @<span class="attr">select</span>=<span class="string">&quot;menuSelect&quot;</span> <span class="attr">router</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-left&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-operation icon&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeCollapse&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isBlog&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;/index&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;display: inline;&quot;</span>&gt;</span></span><br><span class="line">              大头博客</span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header-right&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">&quot;group in groups&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;group.id&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;group.href&quot;</span>&gt;</span>&#123;&#123; group.kind &#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/gcl-head/blog&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">:underline</span>=<span class="string">&quot;false&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #4d2586;&quot;</span>&gt;</span></span><br><span class="line">              GitHub</span><br><span class="line">              <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 100 100&quot;</span> <span class="attr">width</span>=<span class="string">&quot;15&quot;</span> <span class="attr">height</span>=<span class="string">&quot;15&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon outbound&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span> <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">points</span>=<span class="string">&quot;45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polygon</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">ref</span>=<span class="string">&quot;router&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="博客搜索栏"><a href="#博客搜索栏" class="headerlink" title="博客搜索栏"></a>博客搜索栏</h2><p>随着内容的增多我意识到需要一个搜索栏来帮助用户快速检索自己需要的信息,于是便决定为博客做一个搜索的功能。</p><p>前端搜索框使用的是elementUI的搜索框<a href="https://element.eleme.io/#/zh-CN/component/input">el-autocomplete</a>，只需要在html中加入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-autocomplete</span><br><span class="line">        v-model=&quot;searchState&quot;</span><br><span class="line">        :fetch-suggestions=&quot;querySearch&quot;</span><br><span class="line">        placeholder=&quot;请输入内容&quot;</span><br><span class="line">        @select=&quot;searchSelect&quot;</span><br><span class="line">        clearable</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">el-autocomplete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在script中编写相应的方法即可实现搜索栏功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  querySearch (queryString, cb) &#123;</span><br><span class="line">    <span class="comment">// 搜索框内容变化调用</span></span><br><span class="line">    <span class="keyword">if</span> (queryString) &#123;</span><br><span class="line">      search(queryString)</span><br><span class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          cb(res.data) <span class="comment">// 设定搜索栏下拉框内容</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  searchSelect (item) &#123;</span><br><span class="line">    <span class="comment">// 选择搜索框下拉列表结果</span></span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是cb方法的参数需要是一个字典数组，下拉框默认显示字典中的value属性的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">value: <span class="string">&#x27;我会显示在下拉框中&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>后端我利用<code>Person.objects.filter(name__icontains=&quot;abc&quot;)</code>这一命令来进行检索，他的功能是检索Person库中名称中包含”abc”，且abc不区分大小写的条目并返回。我将返回的数据切片出前5条，并通过<code>re.search()</code>准确地得到被匹配字符的位置，以返回搜索内容的上下文。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 搜索博客文字内容并返回前5条</span></span><br><span class="line">    content = request.body.decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 搜索框内容</span></span><br><span class="line">    print(content)</span><br><span class="line">    result = models.BlogContent.objects.<span class="built_in">filter</span>(text__icontains=content)[:<span class="number">5</span>]  <span class="comment"># 搜索结果前五条</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">        position = re.search(content, r.text, re.I).span()[<span class="number">0</span>]  <span class="comment"># 匹配位置</span></span><br><span class="line">        res.append(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: r.name,  <span class="comment"># 匹配文章名</span></span><br><span class="line">                <span class="string">&#x27;href&#x27;</span>: r.href,  <span class="comment"># 匹配文章链接</span></span><br><span class="line">                <span class="string">&#x27;value&#x27;</span>: r.text[position:position+<span class="number">20</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(res))</span><br></pre></td></tr></table></figure><p>然后当用户选择了搜索框下拉列表中的某一条后，根据该条的href、name等属性跳转到对应路由和文章：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">searchSelect (item) &#123;</span><br><span class="line">      <span class="comment">// 选择搜索框下拉列表结果</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$route.path === item.href) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$refs.router.clickContent(item.name)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.searchName = item.name <span class="comment">// 想blog组件传递当前选择的文章名字</span></span><br><span class="line">      <span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>: item.href&#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="增加评论功能"><a href="#增加评论功能" class="headerlink" title="增加评论功能"></a>增加评论功能</h2><p>博客作为展示自己学习记录的平台，自然少不了用来交流心得的评论系统。</p><p><a href="https://valine.js.org/">Valine</a> 诞生于2017年8月7日，是一款基于<a href="https://leancloud.cn/">LeanCloud</a>的快速、简洁且高效的无后端评论系统。</p><p>我采用Valine来做评论系统，是因为他是无后端的评论系统，配置方便，而且不需要注册第三方的账号，且可以邮件回复，还有验证码功能，充分满足了我的需要。</p><p>安装Valine：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Install leancloud<span class="string">&#x27;s js-sdk</span></span></span><br><span class="line">npm install leancloud-storage --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> Install valine</span></span><br><span class="line">npm install valine --save</span><br></pre></td></tr></table></figure><p>创建评论组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;vcomments&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    currentChoice: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#39;&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    this.createValine()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    createValine () &#123;</span><br><span class="line">      const Valine &#x3D; require(&#39;valine&#39;)</span><br><span class="line">      const that &#x3D; this</span><br><span class="line">      console.log(that.currentChoice)</span><br><span class="line">      window.AV &#x3D; require(&#39;leancloud-storage&#39;)</span><br><span class="line">      let valine &#x3D; new Valine()</span><br><span class="line">      valine.init(&#123;</span><br><span class="line">        el: &#39;#vcomments&#39;,</span><br><span class="line">        appId: &#39;M40skc4mCiCskeW7JKep07Ge-gzGzoHsz&#39;,</span><br><span class="line">        appKey: &#39;UdtgcabRV6hy6O0AdEzm8jo8&#39;,</span><br><span class="line">        notify: true,</span><br><span class="line">        verify: true,</span><br><span class="line">        avatar: &#39;retro&#39;,</span><br><span class="line">        path: that.$route.path + &#39;&#x2F;&#39; + that.currentChoice, &#x2F;&#x2F; 每篇博客对应不同的path、评论系统</span><br><span class="line">        placeholder: &#39;欢迎留言与我分享您的想法...&#39;</span><br><span class="line">      &#125;)</span><br><span class="line">      this.valineRefresh &#x3D; false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    &#39;$route&#39; () &#123;</span><br><span class="line">      &#x2F;&#x2F; 重新刷新valine</span><br><span class="line">      this.createValine()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在其他组件中应用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;comments :currentChoice &#x3D; currentChoice v-if&#x3D;&quot;showComment&quot;&gt;&lt;&#x2F;comments&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import comments from &#39;@&#x2F;components&#x2F;valine&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">components: &#123; comments &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>每次更换侧边栏选择，使用和vue-markdown一样的刷新方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.showComment = <span class="literal">false</span></span><br><span class="line"><span class="built_in">this</span>.currentChoice = name</span><br><span class="line"><span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.showComment = <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="手机端兼容"><a href="#手机端兼容" class="headerlink" title="手机端兼容"></a>手机端兼容</h2><p>方便手机用户也可以流畅地使用本博客，不会因为屏幕大小而影响使用体验</p><p>主要通过屏幕宽度来判断是否使用手机端的页面布局(隐藏侧边栏)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">`<span class="subst">$&#123;<span class="built_in">document</span>.documentElement.clientWidth&#125;</span>`</span> &lt; <span class="number">850</span>) &#123; <span class="comment">// 如果是手机端登录缩小侧边栏</span></span><br><span class="line">    <span class="built_in">this</span>.isCollapse = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每次进入页面都会对宽度进行一次判断，如果小于850px则隐藏侧边栏。</p>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> route-view </tag>
            
            <tag> el-autocomplete </tag>
            
            <tag> valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer刷题</title>
      <link href="2019/09/30/%E5%89%91%E6%8C%87offer%E5%88%B7%E9%A2%98/"/>
      <url>2019/09/30/%E5%89%91%E6%8C%87offer%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>这是我学习<a href="https://book.douban.com/subject/6966465/">《剑指offer》</a>的学习记录，希望能够通过用java完成其中的题目来提高我对java的理解，并且复习以前数据结构的相关内容以提升面试中算法方面的应对能力。题目主要来自<a href="https://xin-tan.com/passages/2019-06-23-algorithm-offer/#%E4%BB%8B%E7%BB%8D">心谭博客</a>，对于其中按照字符串、查找、链表等分类的题目依次进行分析和实现。</p><p>希望也能够对大家的学习和面试有所帮助吧！</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><blockquote><p>主要掌握顺序查找和二分查找方法</p></blockquote><h2 id="1、旋转数组最小的数字"><a href="#1、旋转数组最小的数字" class="headerlink" title="1、旋转数组最小的数字"></a>1、旋转数组最小的数字</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</p><p>输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为 1。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>利用二分查找的思想，如果中间的元素比最左边的元素大，则显而易见最小值在右侧，反之则在左侧。</p><p>如果左右侧和中间的值相同无法判断，则转为顺序查找。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 旋转数组最小的数字 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method1</span> <span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Empty array!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 空数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = a.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right-left &lt;= <span class="number">1</span>) <span class="keyword">return</span> a[right]; <span class="comment">// 数组元素少于2返回结果</span></span><br><span class="line">        <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[left] == a[mid] &amp;&amp; a[right] == a[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> findMin(Arrays.copyOfRange(a, left, right + <span class="number">1</span>)); <span class="comment">// 三处元素大小相同转为普通排序</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= a[left]) <span class="keyword">return</span> method1(Arrays.copyOfRange(a, mid, right + <span class="number">1</span>)); <span class="comment">// 最小值在右边</span></span><br><span class="line">        <span class="keyword">if</span> (a[mid] &lt;= a[right]) <span class="keyword">return</span> method1(Arrays.copyOfRange(a, left, mid + <span class="number">1</span>)); <span class="comment">// 最小值在左边</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Unknwon error!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMin</span> <span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序查找最小值</span></span><br><span class="line">        <span class="keyword">int</span> min = a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; min) min = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="comment">// 输入数组</span></span><br><span class="line">        System.out.println(method1(sample));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、数字在排序数组中出现的次数"><a href="#2、数字在排序数组中出现的次数" class="headerlink" title="2、数字在排序数组中出现的次数"></a>2、数字在排序数组中出现的次数</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>统计一个数字在排序数组中出现的次数。</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先采用二分查找找到指定数字在数组中的下标。</p><p>然后分别向前向后遍历确定左右边界下标，差值即为出现次数。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 数字在排序数组中出现的次数 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method1</span> <span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = findBoundary(a, b);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// a中无b</span></span><br><span class="line">        <span class="keyword">int</span> left = index;</span><br><span class="line">        <span class="keyword">int</span> right = index;</span><br><span class="line">        <span class="keyword">while</span>(a[left] == b) left--; <span class="comment">// 寻找左边界</span></span><br><span class="line">        <span class="keyword">while</span>(a[right] == b) right++; <span class="comment">// 寻找右边界</span></span><br><span class="line">        <span class="keyword">return</span> right - left - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findBoundary</span> <span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 二分查找b在a中的位置</span></span><br><span class="line">        <span class="keyword">if</span> (a.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 空数组</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[mid] == b) <span class="keyword">return</span> mid; <span class="comment">// bingo</span></span><br><span class="line">            <span class="keyword">if</span> (a[mid] &lt; b) &#123; <span class="comment">// b在右边</span></span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> right = mid - <span class="number">1</span>; <span class="comment">// b在左边</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[left] == b) <span class="keyword">return</span> left; <span class="comment">// left==right</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// a中无b</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sample = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 输入数组</span></span><br><span class="line">        System.out.println(method1(sample, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><blockquote><p> 关于字符串的题目，对于熟悉字符串相关api的使用有很大的帮助。</p></blockquote><h2 id="1、替换空格"><a href="#1、替换空格" class="headerlink" title="1、替换空格"></a>1、替换空格</h2><p>###题目描述</p><p>请实现一个函数，把字符串中的每个空格替换成”%20”。</p><p>例如输入“We are happy.”，则输出“We%20are%20happy.”。</p><p>###解题思路</p><p>一种是利用String类的replaceAll()方法，可以将字符串中的指定子字符串替换为其他字符串(支持正则)；</p><p>另一种方法则是首先用split()函数将字符串根据空格分割成字符串数组，在用StringJoiner将字符串合并并在每个元素间加上”%20”。</p><p>###代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 替换空格 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">&quot;We are happy.&quot;</span>;</span><br><span class="line">        System.out.println(method1(a));</span><br><span class="line">        System.out.println(method2(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">method1</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">// 将空格换成%20</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">method2</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 利用split将字符串按照空格分开</span></span><br><span class="line">        String b[] = a.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> c = <span class="keyword">new</span> StringJoiner(<span class="string">&quot;%20&quot;</span>); <span class="comment">// 在每个字符串之间加上%20</span></span><br><span class="line">        <span class="keyword">for</span> (String bb : b) &#123;</span><br><span class="line">            c.add(bb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、字符串的全排列"><a href="#2、字符串的全排列" class="headerlink" title="2、字符串的全排列"></a>2、字符串的全排列</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串 abc，则打印出由字符 a、b、c 所能排列出来的所有字符串 abc、acb、bac、bca、cab 和 cba。</p><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>用递归的方法，对于每次传入递归方法中的字符串和下标，将他的对应下标字符和之后的所有字符依次进行交换并将下标+1继续递归，直到下标到达了字符串的末尾，便实现了所有可能的字符串的遍历。还利用了set数据结构，防止重复结果的出现。method1()中使用copy实现了基本类型的深拷贝，使得每次调用该函数的aa值不互相影响。</p><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 字符串的全排列 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String test = <span class="string">&quot;abbcccdddd&quot;</span>; <span class="comment">// 输入字符串</span></span><br><span class="line">        method1(test.toCharArray(), <span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+result);</span><br><span class="line">        System.out.println(<span class="string">&quot;length:&quot;</span>+result.size());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> HashSet&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span>[] swap(<span class="keyword">char</span>[] aa, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">        <span class="comment">// 交换元素</span></span><br><span class="line">        <span class="keyword">char</span>[] a = aa.clone();</span><br><span class="line">        <span class="keyword">char</span> b = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = b;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">char</span>[] sample, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// n表示当前交换元素下标</span></span><br><span class="line">        <span class="keyword">int</span> len = sample.length;</span><br><span class="line">        <span class="keyword">if</span> (n == len) &#123;</span><br><span class="line">            <span class="comment">// 最后一个元素交换完记录结果</span></span><br><span class="line">            result.add(<span class="keyword">new</span> String(sample));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="comment">// 将当前交换元素后的每个元素和当前元素进行交换</span></span><br><span class="line">            method1(swap(sample, n, i), n+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、翻转单词顺序"><a href="#3、翻转单词顺序" class="headerlink" title="3、翻转单词顺序"></a>3、翻转单词顺序</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。</p><p>为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student.”，则输出”student. a am I”。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>以空格为分割将字符串编程数组再利用StringJoiner逆序将他们合成新的字符串</p><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 翻转单词顺序 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String sample = <span class="string">&quot;I am a student.&quot;</span>; <span class="comment">// 输入字符串</span></span><br><span class="line">        System.out.println(method1(sample));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">method1</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        String[] aa = a.split(<span class="string">&quot; &quot;</span>); <span class="comment">// 将输入字符串根据空格分组</span></span><br><span class="line">        <span class="keyword">var</span> reversedA = <span class="keyword">new</span> StringJoiner(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = aa.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            reversedA.add(aa[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reversedA.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、实现atoi"><a href="#4、实现atoi" class="headerlink" title="4、实现atoi"></a>4、实现atoi</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>请你来实现一个  atoi  函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p><p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p><p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p><p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p><p>说明：</p><p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为  [−2^31,  2^31 − 1]。如果数值超过这个范围，qing 返回  INT_MAX (2^31 − 1) 或  INT_MIN (−2^31) 。</p><p>题目来自 <a href="https://leetcode-cn.com/problems/string-to-integer-atoi">LeetCode</a>，可以直接前往这个网址查看题目各种情况下要求的输出。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>利用split按照空格分割字符串，获得第一段非空字符串，如果没有则返回0</li><li>判断首位字符是否为正负或者数字，若是正负则记录正负，不是则返回零</li><li>一直到下个非数字之前，将所有数字字符转化为整数，用long类型防止越界，并且每次加/减完都要检查是否越界，是则直接返回 INT_MAX or INT_MIN</li></ul><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">atoi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INT_MAX = Integer.MAX_VALUE; <span class="comment">// 最大值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INT_MIN = Integer.MIN_VALUE; <span class="comment">// 最小值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isPlus = <span class="keyword">true</span>; <span class="comment">// 是否为正数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymble</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为正负号</span></span><br><span class="line">        <span class="keyword">return</span> a==<span class="string">&#x27;+&#x27;</span> || a==<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNum</span><span class="params">(<span class="keyword">char</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否为数字</span></span><br><span class="line">        <span class="keyword">return</span> a&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; a&lt;=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">atoi</span><span class="params">(String a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 转换字符串为整数</span></span><br><span class="line">        String[] aToArray = a.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (aToArray.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i&lt;aToArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(aToArray[i].length()&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i==aToArray.length) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 排除空输入的情况</span></span><br><span class="line">        <span class="keyword">char</span>[] aa = aToArray[i].toCharArray(); <span class="comment">// 排除首尾空格和多余字符串</span></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (isSymble(aa[<span class="number">0</span>])) &#123;</span><br><span class="line">            isPlus = aa[<span class="number">0</span>]==<span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (isNum(aa[<span class="number">0</span>])) &#123;</span><br><span class="line">            isPlus = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> re = <span class="number">0</span>; <span class="comment">// 返回的数字</span></span><br><span class="line">        <span class="keyword">for</span>(;i&lt;aa.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isNum(aa[i])) <span class="keyword">break</span>; <span class="comment">//排除字符串中有非数字的异常情况</span></span><br><span class="line">            <span class="keyword">if</span> (isPlus) re = re*<span class="number">10</span>+aa[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> re = re*<span class="number">10</span>-aa[i]+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (re&gt;INT_MAX) <span class="keyword">return</span> INT_MAX;</span><br><span class="line">            <span class="keyword">if</span> (re&lt;INT_MIN) <span class="keyword">return</span> INT_MIN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)re;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">&quot;9223372036854775808&quot;</span>; <span class="comment">// 输入字符串</span></span><br><span class="line">        System.out.println(atoi(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><blockquote><p>树相关数据结构题目</p></blockquote><h2 id="1-重建二叉树"><a href="#1-重建二叉树" class="headerlink" title="1. 重建二叉树"></a>1. 重建二叉树</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>例如，给出</p><p>前序遍历 preorder = [3,9,20,15,7]<br>中序遍历 inorder = [9,3,15,20,7]<br>返回如下的二叉树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目中强调了<strong>两个遍历中都不含重复数字</strong>，因此可以直接用遍历序列中的数字值来定位根节点。</p><p>我们知道前序遍历序列的第一个数字是该序列对应二叉树的根节点，因此可以轻松的获取根节点的位置和大小。</p><p>然后我们可以通过确定根节点的大小在中序遍历序列中找到根节点的位置，从而将两个序列都分成左子树和右子树的子数列。</p><p>再在两个子树的子序列中找到他们的根节点，以此类推。</p><p>直到找到序列的长度为1，则递归完了整棵树。</p><h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 重建二叉树 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">node</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义节点类</span></span><br><span class="line">        <span class="keyword">public</span> node left;</span><br><span class="line">        <span class="keyword">public</span> node right;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> value; <span class="comment">// 节点值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">node</span> <span class="params">(node l, node r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.left = l;</span><br><span class="line">            <span class="keyword">this</span>.right = r;</span><br><span class="line">            <span class="keyword">this</span>.value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> node <span class="title">getNode</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.length &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (preorder.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> node(<span class="keyword">null</span>, <span class="keyword">null</span>, preorder[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> value = preorder[<span class="number">0</span>]; <span class="comment">// 获得节点值</span></span><br><span class="line">        <span class="keyword">int</span> midIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == value) &#123;</span><br><span class="line">                <span class="comment">// 获取根节点索引</span></span><br><span class="line">                midIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 递归整棵树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> node(getNode(Arrays.copyOfRange(preorder, <span class="number">1</span>, midIndex+<span class="number">1</span>),</span><br><span class="line">                Arrays.copyOfRange(inorder, <span class="number">0</span>, midIndex)),</span><br><span class="line">                getNode(Arrays.copyOfRange(preorder, midIndex+<span class="number">1</span>, preorder.length),</span><br><span class="line">                Arrays.copyOfRange(inorder, midIndex+<span class="number">1</span>, inorder.length)), value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><blockquote><p>帮助你快速掌握链表这种数据结构</p></blockquote><h2 id="0、链表构造"><a href="#0、链表构造" class="headerlink" title="0、链表构造"></a>0、链表构造</h2><p>在一切开始前，首先要用java构造出链表的基本数据结构(顺便实现了深拷贝)，以下是代码实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> &lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node &lt;T&gt; next = <span class="keyword">null</span>; <span class="comment">// next节点</span></span><br><span class="line">    <span class="keyword">public</span> T data; <span class="comment">// 节点内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span> <span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Node &lt;T&gt; clone() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> re = (Node) <span class="keyword">super</span>.clone();</span><br><span class="line">            re.next = <span class="keyword">this</span>.next;<span class="comment">//深拷贝处理</span></span><br><span class="line">            <span class="keyword">return</span> re;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLink</span> &lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Node &lt;T&gt; head = <span class="keyword">null</span>; <span class="comment">// 头节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span> <span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 插入新节点</span></span><br><span class="line">        <span class="keyword">var</span> newNode = <span class="keyword">new</span> Node &lt;T&gt; (data); <span class="comment">// 实例化新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = newNode; <span class="comment">// 空链表情况</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.next = newNode; <span class="comment">// 遍历到空节点，并将新节点连上</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 顺序输出链表值</span></span><br><span class="line">        <span class="keyword">var</span> tmp = head;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(tmp.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyLink &lt;T&gt; clone() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> re = (MyLink) <span class="keyword">super</span>.clone();</span><br><span class="line">            re.head = <span class="keyword">this</span>.head.clone();<span class="comment">//深拷贝处理</span></span><br><span class="line">            <span class="keyword">var</span> tmp = re.head;</span><br><span class="line">            <span class="keyword">while</span> (tmp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                tmp.next = tmp.next.clone();<span class="comment">//深拷贝处理</span></span><br><span class="line">                tmp = tmp.next;<span class="comment">//深拷贝处理</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> re;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1、从尾到头打印链表"><a href="#1、从尾到头打印链表" class="headerlink" title="1、从尾到头打印链表"></a>1、从尾到头打印链表</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个链表，从尾到头打印链表每个节点的值。</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>new一个节点，从链表头部开始遍历整个链表，将得到的值依次存入栈中。</p><p>利用栈的先入后出的特性，再依次从栈中pop出节点值。</p><h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 从尾到头打印链表 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">method1</span> <span class="params">(MyLink &lt;T&gt; a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> tmp = a.head;</span><br><span class="line">        Stack &lt;T&gt; re = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            re.push(tmp.data);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!re.empty()) &#123;</span><br><span class="line">            System.out.print(re.pop());</span><br><span class="line">            System.out.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLink&lt;Integer&gt; a = <span class="keyword">new</span> MyLink&lt;&gt;();</span><br><span class="line">        a.insert(<span class="number">1</span>);</span><br><span class="line">        a.insert(<span class="number">2</span>);</span><br><span class="line">        a.insert(<span class="number">3</span>);</span><br><span class="line">        a.insert(<span class="number">3</span>);</span><br><span class="line">        a.insert(<span class="number">3</span>);</span><br><span class="line">        method1(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、快速删除链表节点"><a href="#2、快速删除链表节点" class="headerlink" title="2、快速删除链表节点"></a>2、快速删除链表节点</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定单向链表的头指针和一个结点指针，定义一个函数在 O(1) 时间删除该结点。</p><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><p>已办删除节点的思路是遍历找到要求节点的上一个节点，在将要求节点的下一个节点连到上一个的next后删除要求节点，但本体要求时间复杂度在 O(1) ，所以我们需要另谋出路。</p><p>仔细观察会发现题目给定的是节点类而非正常情况的节点内容，因此直接将要求节点的next的内容和next复制到要求节点本身再删除要求节点的next即可。</p><p>这样除了尾节点的情况需要单独遍历删除，其他n-1种情况时间复杂度都是 O(1) ，符合题目条件。</p><h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 快速删除链表节点 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">method1</span> <span class="params">(MyLink &lt;T&gt; a, Node &lt;T&gt; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.head == <span class="keyword">null</span> || b == <span class="keyword">null</span>) <span class="keyword">return</span>; <span class="comment">// 排除异常情况</span></span><br><span class="line">        <span class="keyword">if</span> (a.head == b) &#123; <span class="comment">// 删除头节点情况</span></span><br><span class="line">            a.head = a.head.next;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> nextNode = b.next; <span class="comment">// b的下一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (nextNode == <span class="keyword">null</span>) &#123; <span class="comment">// b是尾节点</span></span><br><span class="line">            nextNode = a.head;</span><br><span class="line">            <span class="keyword">while</span> (nextNode.next != b) nextNode = nextNode.next; <span class="comment">// 寻找b节点的前一个节点</span></span><br><span class="line">            nextNode.next = <span class="keyword">null</span>; <span class="comment">// 删除节点</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        b.data = nextNode.data;</span><br><span class="line">        b.next = nextNode.next;</span><br><span class="line">        nextNode = <span class="keyword">null</span>; <span class="comment">// 建议垃圾回收</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLink &lt;Integer&gt; sample = <span class="keyword">new</span> MyLink&lt;&gt;();</span><br><span class="line">        sample.insert(<span class="number">1</span>);</span><br><span class="line">        sample.insert(<span class="number">2</span>);</span><br><span class="line">        sample.insert(<span class="number">3</span>);</span><br><span class="line">        sample.print();</span><br><span class="line">        <span class="keyword">var</span> node = sample.head.next; <span class="comment">// 要删除的节点</span></span><br><span class="line">        method1(sample, node);</span><br><span class="line">        sample.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、链表倒数第k节点"><a href="#3、链表倒数第k节点" class="headerlink" title="3、链表倒数第k节点"></a>3、链表倒数第k节点</h2><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个单链表，输出该链表中倒数第 k 个节点。</p><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><p>先遍历一遍链表获得链表长度；</p><p>通过长度获得倒数第k个节点的下标；</p><p>遍历第二遍链表，找到指定下标的节点并返回。</p><h3 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 链表倒数第<span class="title">k</span>节点 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Node &lt;T&gt; method1 (MyLink &lt;T&gt; a, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// k非法</span></span><br><span class="line">        <span class="keyword">if</span> (a.head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 空链表</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>; <span class="comment">// 链表长度</span></span><br><span class="line">        <span class="keyword">var</span> tmp = a.head;</span><br><span class="line">        <span class="keyword">while</span> (tmp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">            length ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; length) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// k非法</span></span><br><span class="line">        <span class="keyword">int</span> index = length - k; <span class="comment">// 倒数k节点下标</span></span><br><span class="line">        tmp = a.head;</span><br><span class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">            index --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLink&lt;Integer&gt; sample = <span class="keyword">new</span> MyLink&lt;&gt;();</span><br><span class="line">        sample.insert(<span class="number">0</span>);</span><br><span class="line">        sample.insert(<span class="number">1</span>);</span><br><span class="line">        sample.insert(<span class="number">1</span>);</span><br><span class="line">        sample.insert(<span class="number">2</span>);</span><br><span class="line">        sample.insert(<span class="number">2</span>);</span><br><span class="line">        sample.insert(<span class="number">2</span>);</span><br><span class="line">        sample.insert(<span class="number">3</span>);</span><br><span class="line">        sample.insert(<span class="number">5</span>);</span><br><span class="line">        sample.print();</span><br><span class="line">        System.out.println(method1(sample, <span class="number">6</span>).data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、反转链表"><a href="#4、反转链表" class="headerlink" title="4、反转链表"></a>4、反转链表</h2><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>定义一个函数，输入一个链表，反转该链表并输出反转后链表。</p><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><p>第一种思路是使用头插法，将输入链表的节点依次放入输出链表的头指针所指节点，类似栈；</p><p>第二种思路同样需要遍历所有节点，对于每个节点，</p><p>依次保存他的前节点pre和下一节点next。</p><p>然后将当前节点的next指向pre。</p><p>最后通过之前保存的next，将pre和当前节点向后移一位。</p><p>重复上述步骤，直到当前节点指向了null，便可反转整个链表；</p><p>两种方法都需要遍历整个链表，时间复杂度为O(N)。</p><p>但如果第二种方法不创建新链表，则空间复杂度只有O(1)，相比第一种方法的O(N)​更加节省空间。</p><h3 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 反转链表 </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; MyLink &lt;T&gt; method1(MyLink &lt;T&gt; sample) &#123;</span><br><span class="line">        <span class="comment">// 头插法</span></span><br><span class="line">        <span class="keyword">if</span> (sample.head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 排除异常</span></span><br><span class="line">        <span class="keyword">var</span> re = <span class="keyword">new</span> MyLink&lt;T&gt;();</span><br><span class="line">        Node&lt;T&gt; re_head = <span class="keyword">new</span> Node&lt;T&gt;(<span class="keyword">null</span>); <span class="comment">// 定义头指针</span></span><br><span class="line">        re_head.next = re.head; <span class="comment">// 指向第一个节点</span></span><br><span class="line">        <span class="keyword">var</span> tmp = sample.head;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> next = re_head.next; <span class="comment">// 记录当前头节点</span></span><br><span class="line">            re_head.next = <span class="keyword">new</span> Node &lt;&gt; (tmp.data); <span class="comment">// 插入新节点</span></span><br><span class="line">            re_head.next.next = next; <span class="comment">// 将原头节点放入新头节点后面</span></span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        re.head = re_head.next;</span><br><span class="line">        <span class="keyword">return</span> re; <span class="comment">// 返回反转链表</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; MyLink &lt;T&gt; method2(MyLink &lt;T&gt; sample) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = sample.head; <span class="comment">// tmp表示当前节点</span></span><br><span class="line">        Node&lt;T&gt; pre = <span class="keyword">null</span>; <span class="comment">// pre表示当前节点的前节点</span></span><br><span class="line">        Node&lt;T&gt; next; <span class="comment">// next表示当前节点的下一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将tmp.next指向pre</span></span><br><span class="line">            next = tmp.next; <span class="comment">// 存储下一个节点</span></span><br><span class="line">            tmp.next = pre;</span><br><span class="line">            <span class="comment">// pre和tmp向后移一位</span></span><br><span class="line">            pre = tmp;</span><br><span class="line">            tmp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        sample.head = pre; <span class="comment">// 重新定位头节点位置</span></span><br><span class="line">        <span class="keyword">return</span> sample;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sample = <span class="keyword">new</span> MyLink&lt;Integer&gt;();</span><br><span class="line">        sample.insert(<span class="number">1</span>);</span><br><span class="line">        sample.insert(<span class="number">2</span>);</span><br><span class="line">        sample.insert(<span class="number">3</span>);</span><br><span class="line">        sample.insert(<span class="number">4</span>);</span><br><span class="line">        sample.insert(<span class="number">5</span>);</span><br><span class="line">        sample.print();</span><br><span class="line">        method1(sample).print();</span><br><span class="line">        method2(sample.clone()).print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex——超好用的布局方案</title>
      <link href="2019/09/20/Flex%E2%80%94%E2%80%94%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/"/>
      <url>2019/09/20/Flex%E2%80%94%E2%80%94%E8%B6%85%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>对齐、居中是我写前端的时候最头疼的两件事情，要实现这两个功能，还要保证一定的兼容性是很复杂的事情，网上有很多实现对齐的文章，让人看得头晕目眩。</p><p>有了Flex，一切都不一样了，我们再也不用把生命浪费在‘垂直居中’上了！</p></blockquote><h2 id="使用flex布局"><a href="#使用flex布局" class="headerlink" title="使用flex布局"></a>使用flex布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.xxx</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.xxx</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex; <span class="comment">/* 行内也可以使用flex布局 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><table><thead><tr><th>属性</th><th>含义</th><th>值</th><th>常用值</th></tr></thead><tbody><tr><td>flex-direction</td><td>项目排列方向</td><td>row(默认)、row-reverse、column、column-reverse</td><td>row / column</td></tr><tr><td>flex-wrap</td><td>项目是否换行</td><td>nowrap(默认)、wrap、wrap-reverse</td><td>wrap（允许换行）</td></tr><tr><td>justify-content</td><td>水平对齐方向</td><td>flex-start(默认)、flex-end、center、space-between、space-around</td><td>center(<strong>水平居中</strong>)/ space-around(等间距布局)</td></tr><tr><td>align-items</td><td>垂直对齐方向</td><td>flex-start、flex-end、center、baseline、stretch(默认: 占满整个容器的高度)</td><td>center(<strong>垂直居中</strong>)</td></tr></tbody></table><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><table><thead><tr><th>属性</th><th>含义</th><th>值</th><th>常用值</th></tr></thead><tbody><tr><td>order</td><td>项目排列顺序，越小越靠前</td><td>0(默认)、1、2…</td><td>整数</td></tr><tr><td>flex</td><td><code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，<br />后两个属性可选，一般只用第一个属性，表示项目<br />放大比例，类似栅格。</td><td>0 0 auto(默认)…</td><td>整数</td></tr><tr><td>align-self</td><td>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性</td><td>flex-start、flex-end、center、baseline、stretch</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器部署</title>
      <link href="2019/09/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>2019/09/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我使用的是腾讯云学生服务器，centos7环境，接下来将详述我是怎么将博客的项目部署到服务器上，以及其中遇到的坑。</p></blockquote><h2 id="1、登录服务器"><a href="#1、登录服务器" class="headerlink" title="1、登录服务器"></a>1、登录服务器</h2><p>购买云服务器并进入控制台，在实例中选择更多-密码/密钥-重置密码设定ssh登录的密码。</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g75voy16t0j30850ant92.jpg" alt="屏幕快照 2019-09-20 下午12.37.21"></p><p>然后在本地命令行中通过如下命令ssh登录进入服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh &lt;username&gt;@&lt;hostname or IP address&gt;</span><br></pre></td></tr></table></figure><p>其中username一般默认是root。</p><h2 id="2、安装部署所需包"><a href="#2、安装部署所需包" class="headerlink" title="2、安装部署所需包"></a>2、安装部署所需包</h2><p>安装必要的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install git  <span class="comment"># 使用git同步代码</span></span><br><span class="line"><span class="comment"># 在服务器编译构建前端所需库</span></span><br><span class="line">yum install nodejs</span><br><span class="line">yum install npm</span><br><span class="line"><span class="comment"># 服务器部署所需库</span></span><br><span class="line">yum install nginx</span><br><span class="line">yum install uwsgi</span><br></pre></td></tr></table></figure><p>centos自带python2，如果想用python3版本的django，则需要自行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载python3</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xf Python-3.6.1.tgz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确保已安装相关依赖</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install pcre pcre-devel</span><br><span class="line">yum install zlib zlib-devel</span><br><span class="line">yum install openssl openssl--devel</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录开始安装</span></span><br><span class="line">cd Python-3.6.1</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建软链接</span></span><br><span class="line">ln -s /usr/Python-3.6.1/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><p>pip3应该是随python3自动安装的，但我当时遇到了pip3没有随python3一起安装的情况，因此要手动安装pip3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载get-pip.py</span></span><br><span class="line">wget https://bootstrap.pypa.io/3.2/get-pip.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行脚本</span></span><br><span class="line">python3 get-pip.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建软链接</span></span><br><span class="line">ln -s /usr/python3.6.1/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure><p>然后用pip安装django库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure><h2 id="3、上传本地项目到github"><a href="#3、上传本地项目到github" class="headerlink" title="3、上传本地项目到github"></a>3、上传本地项目到github</h2><p>接下来将本地的项目传到github上，进入本地项目根目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录初始化git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 创建远程库</span></span><br><span class="line"><span class="comment"># 添加远程库</span></span><br><span class="line">git remote add origin git@...</span><br><span class="line"><span class="comment"># 上传项目到主分支</span></span><br><span class="line">git push -u origin master <span class="comment"># -u参数不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，以后的push可以不用该参数</span></span><br></pre></td></tr></table></figure><p>github上创建远程库参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440">添加远程库</a></p><p>以后每次本地改变内容后只需要执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment"># 将变化的内容添加到仓库中</span></span><br><span class="line">git commit -m <span class="string">&quot;...&quot;</span> <span class="comment"># 把内容提交到仓库，并增加...标注</span></span><br><span class="line">git push origin master <span class="comment"># 将本地仓库内容推送到远程的master分支中</span></span><br></pre></td></tr></table></figure><h2 id="4、下载github项目到服务器中"><a href="#4、下载github项目到服务器中" class="headerlink" title="4、下载github项目到服务器中"></a>4、下载github项目到服务器中</h2><p>在自己仓库的右上角找到Clone or download：</p><p><img src="https://tva1.sinaimg.cn/large/006y8mN6gy1g75vv6is3qj30ck0693z5.jpg" alt="屏幕快照 2019-09-20 下午12.42.33"></p><p>将框中的链接复制下来，然后<strong>进入服务器</strong>想要创建项目的目录中，执行<code>git clone &#39;复制下来的链接内容&#39;</code>，便可将你的项目下载到本地，之后每次更新，只要进入项目根目录执行<code>git pull</code>就可以对项目内容进行更新了。</p><h2 id="5、项目编译和运行"><a href="#5、项目编译和运行" class="headerlink" title="5、项目编译和运行"></a>5、项目编译和运行</h2><p>编译前端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入项目根目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入前端目录</span></span><br><span class="line">cd frontend</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译项目</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>移动静态文件，为之后nginx的部署做准备</p><p>进入settings.py中加入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后在项目根目录运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure><p>这样dist/static里面的静态文件就转移到了项目根目录的static中了。</p><p>接下来可以先启动django试跑一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>在本地打开浏览器，输入ip:8080即可访问网站。（如果失败可能是服务器没有开通相应端口，请自行前往开通）</p><h2 id="6、uwsgi和nginx的配置"><a href="#6、uwsgi和nginx的配置" class="headerlink" title="6、uwsgi和nginx的配置"></a>6、uwsgi和nginx的配置</h2><p>在项目根目录新建blog.ini存放uwsgi的配置文件，并写入：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[uwsgi]</span></span><br><span class="line"><span class="attr">socket</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9292</span> <span class="comment"># 和nginx交互的接口</span></span><br><span class="line"><span class="attr">stats</span> = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9293</span></span><br><span class="line"><span class="comment">;http = :8000 # 设定该参数可以直接通过http访问网站</span></span><br><span class="line"><span class="attr">workers</span> = <span class="number">4</span></span><br><span class="line"><span class="comment"># 项目根目录</span></span><br><span class="line"><span class="attr">chdir</span> = /root/blog</span><br><span class="line"><span class="attr">touch-reload</span> = /root/blog</span><br><span class="line"><span class="attr">py-auto-reload</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 在项目跟目录和项目同名的文件夹里面的一个文件</span></span><br><span class="line"><span class="attr">module</span>= blog.wsgi</span><br><span class="line"><span class="attr">pidfile</span> = /var/run/blog.pid</span><br><span class="line"><span class="attr">daemonize</span> = /var/log/blog.log</span><br><span class="line"><span class="attr">master</span>=<span class="literal">True</span></span><br><span class="line"><span class="attr">vacuum</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在nginx的配置文件(我的配置文件路径：/etc/nginx/conf.d/default.conf)中写入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name bighead.net.cn;</span><br><span class="line">    root &#x2F;root&#x2F;blog;</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access_narwhals.log;</span><br><span class="line">    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error_narwhals.log;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">            uwsgi_pass 127.0.0.1:9292; # 和uwsgi交互的接口</span><br><span class="line">            include &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    location &#x2F;static&#x2F; &#123;</span><br><span class="line">            root  &#x2F;opt&#x2F;inner_ulb_manager&#x2F;;</span><br><span class="line">            access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini blog.ini  # 启动uwsgi，其中blog.ini为路径</span><br><span class="line">service nginx start  # 启动nginx</span><br></pre></td></tr></table></figure><p>大功告成！</p><blockquote><p>之后如果增加域名别忘记修改settings.py中的allowedhost以及nginx相关配置文件哦~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> uwsgi </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端vue优化</title>
      <link href="2019/09/18/%E5%89%8D%E7%AB%AFvue%E4%BC%98%E5%8C%96/"/>
      <url>2019/09/18/%E5%89%8D%E7%AB%AFvue%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>上一节我们用django和vue构建了基础的实现了前后端分离的项目开发环境，本节我们将为前端架构进行一定地优化，让我们可以更加优雅地进行前端的编写。</p><h2 id="1、vuex"><a href="#1、vuex" class="headerlink" title="1、vuex"></a>1、vuex</h2><p>首先在frontend目录下运行以下命令安装vuex：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save <span class="comment"># 顺带一提，加了--save后运行npm install初始化项目时就会下载该模块，方便部署</span></span><br></pre></td></tr></table></figure><p>在项目根目录/frontend/src目录下增加store文件夹，存放vuex的全局状态管理的各个模块。</p><p>在store下依次创建如下文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store</span><br><span class="line">├── index.html</span><br><span class="line">└── modules // vuex的各个子模块</span><br></pre></td></tr></table></figure><p>在store/index.html中加入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> files = <span class="built_in">require</span>.context(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> modules = &#123;&#125;</span><br><span class="line"></span><br><span class="line">files.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  modules[key.replace(<span class="regexp">/(\.\/|\.js)/g</span>, <span class="string">&#x27;&#x27;</span>)] = files(key).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    modules</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样一来便可以将store/modules中的所有子模块都export到store/index.js的出口中了。</p><p>最后再在程序入口(frontend/main.js)中引入这些子模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> <span class="comment">// vuex</span></span><br><span class="line"><span class="comment">// store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store/index&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如此一来我们便可以优雅地在modules(frontend/src/store/modules)中编写和创建vuex子模块了。</p><h2 id="2、axios"><a href="#2、axios" class="headerlink" title="2、axios"></a>2、axios</h2><p>首先安装axios，在项目frontend目录下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>然后在frontend/src下创建plugin目录，用来存放插件，并创建axios/index.js目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugin</span><br><span class="line">└── axios</span><br><span class="line">└── index.js</span><br></pre></td></tr></table></figure><p>在index.js中创建并export出axios实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 axios 实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>然后在frontend/src下创建api目录，用来存放各种各种请求api：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">└── api</span><br><span class="line">└── ....js</span><br></pre></td></tr></table></figure><p>api具体编写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/plugin/axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;test/&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">&#x27;test/&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样便将axios实例，和请求的代码分离了出来，在实际使用的时候只先在api中编写好对应的请求方法，然后在页面中优雅地调用即可，例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test2(&#123;</span><br><span class="line">  params: ...</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="3、路由配置"><a href="#3、路由配置" class="headerlink" title="3、路由配置"></a>3、路由配置</h2><p>安装，frontend下运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><p>在frontend/src下创建router目录用来管理vue-router，并在router下创建如下目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router</span><br><span class="line">├── index.js</span><br><span class="line">└── routes.js</span><br></pre></td></tr></table></figure><p>首先在index.js中注册组件并引入routes.js中记录的路由信息，并可利用<a href="https://www.jianshu.com/p/dcf5ce5f3ed7">路由守卫</a>来增加相应的路由拦截，进行权限验证，标题修改等操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 路由数据</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出路由 在 main.js 里使用</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由拦截</span></span><br><span class="line"><span class="comment"> * 权限验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">router.afterEach(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* 路由发生变化修改页面title */</span></span><br><span class="line">  <span class="keyword">if</span> (to.meta.title) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;大头博客&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>然后在routes.js中编写具体的路由信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nav <span class="keyword">from</span> <span class="string">&#x27;@/components/navigation-bar&#x27;</span></span><br><span class="line"><span class="comment">// 简化加载路径</span></span><br><span class="line"><span class="keyword">const</span> _import = <span class="function"><span class="params">file</span> =&gt;</span> <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/&#x27;</span> + file)</span><br><span class="line"><span class="comment">// 主框架</span></span><br><span class="line"><span class="keyword">const</span> frameIn = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    redirect: &#123; <span class="attr">name</span>: <span class="string">&#x27;index&#x27;</span> &#125;,</span><br><span class="line">    component: nav,</span><br><span class="line">    children: [</span><br><span class="line">      <span class="comment">// 首页</span></span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        meta: &#123;</span><br><span class="line">          title: <span class="string">&#x27;...&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        component: _import(<span class="string">&#x27;pages/index&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  ...frameIn</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在程序入口文件(main.js)中引入该配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">// 路由设置</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><p>有了vuex管理全局状态和方法，axios进行前后端数据交互，vue-router进行前端路由管理，前端的</p>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建django&amp;vue项目开发环境</title>
      <link href="2019/09/18/%E6%90%AD%E5%BB%BAdjango-vue%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2019/09/18/%E6%90%AD%E5%BB%BAdjango-vue%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇将手把手教你从头构建以vue作为前端，以django作为后端的前后端分离的项目开发环境。</p><p>前端页面我选择使用VueJs进行渲染，django仅作为后端向前端提供api接口和管理数据库。</p></blockquote><h2 id="1、创建django项目"><a href="#1、创建django项目" class="headerlink" title="1、创建django项目"></a>1、创建django项目</h2><p>有两种方法创建django项目</p><ol><li><p>使用pycharm</p><p>File&gt;&gt;New Project&gt;&gt;Django</p></li><li><p>使用命令行（当pycharm是社区版或者使用其他ide时）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject blog</span><br></pre></td></tr></table></figure><p>创建完成后的文件目录结构：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── manage.py</span><br><span class="line">└── blog</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><h2 id="2、创建项目后端"><a href="#2、创建项目后端" class="headerlink" title="2、创建项目后端"></a>2、创建项目后端</h2><p>进入项目根目录（当前目录）执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py startapp backend</span><br></pre></td></tr></table></figure><p>创建完成后的文件目录结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── manage.py</span><br><span class="line">└── blog</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><h2 id="3、创建项目前端"><a href="#3、创建项目前端" class="headerlink" title="3、创建项目前端"></a>3、创建项目前端</h2><p>进入项目跟根目录（当前目录）执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue-init webpack frontend</span><br></pre></td></tr></table></figure><p>创建完成后的文件目录结构：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── backend</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── frontend</span><br><span class="line">│   ├── README.md</span><br><span class="line">│   ├── build</span><br><span class="line">│   │   └── ....</span><br><span class="line">│   ├── config</span><br><span class="line">│   │   ├── dev.env.js</span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── prod.env.js</span><br><span class="line">│   │   └── test.env.js</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── src</span><br><span class="line">│   │   ├── App.vue</span><br><span class="line">│   │   ├── assets</span><br><span class="line">│   │   │   └── logo.png</span><br><span class="line">│   │   ├── components</span><br><span class="line">│   │   │   └── Hello.vue</span><br><span class="line">│   │   └── main.js</span><br><span class="line">│   ├── static</span><br><span class="line">│   └── test</span><br><span class="line">│       └── ...</span><br><span class="line">├── manage.py</span><br><span class="line">└── blog</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><h2 id="4、安装依赖并打包项目"><a href="#4、安装依赖并打包项目" class="headerlink" title="4、安装依赖并打包项目"></a>4、安装依赖并打包项目</h2><p>确认当前所在目录为项目根目录，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>构建完成后frontend目录下会多出一个dist文件夹：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br><span class="line">├── index.html</span><br><span class="line">└── static</span><br><span class="line">    ├── css</span><br><span class="line">    ├── fonts</span><br><span class="line">    ├── img</span><br><span class="line">    └── js</span><br></pre></td></tr></table></figure><p>该文件夹放置打包后的静态网页文件，供django调用</p><h2 id="5、django设定默认访问dist中的index-html"><a href="#5、django设定默认访问dist中的index-html" class="headerlink" title="5、django设定默认访问dist中的index.html"></a>5、django设定默认访问dist中的index.html</h2><p>进入urls.py(即项目根目录/blog/urls.py)，使用通用视图创建模板控制器，让用户访问’/‘时直接返回’dist/index.html’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>, TemplateView.as_view(template_name=<span class="string">&quot;index.html&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>进入settings.py(即项目根目录/blog/settings.py)，找到TEMPLATES配置项，修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;DIRS&#x27;: [os.path.join(BASE_DIR, &#x27;templates&#x27;)]</span></span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [<span class="string">&#x27;frontend/dist&#x27;</span>]</span><br><span class="line">        ,</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样路由配置中的模板控制器就知道index.html的位置了</p><h2 id="6、-配置静态文件搜索路径"><a href="#6、-配置静态文件搜索路径" class="headerlink" title="6、 配置静态文件搜索路径"></a>6、 配置静态文件搜索路径</h2><p>打开 settings.py (项目根目录/blog/settings.py)，找到 STATICFILES_DIRS 配置项，配置如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;frontend/dist/static&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样Django不仅可以将/ulb 映射到index.html，而且还可以顺利找到静态文件</p><p>此时访问 / 我们可以看到使用Django作为后端的VueJS helloworld</p><h2 id="7、提高调试速度-可选"><a href="#7、提高调试速度-可选" class="headerlink" title="7、提高调试速度(可选)"></a>7、提高调试速度(可选)</h2><p>因为使用了django作为后端，因此每次运行必须先用<code>npm run build</code>打包后再启动django。如果直接使用<code>npm start</code>的话，只是启动了前端，无法获得后端的api。而打包花费的时间是很长的，大大降低了编写调试代码的效率。因此引入django第三方包django-cors-headers解决跨域问题。</p><p>安装：<code>pip3 install django-cors-headers</code></p><p>进入 settings.py (项目根目录/blog/settings.py)，找到MIDDLEWARE配置项，修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>,  <span class="comment"># 增加corsheaders中间件</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>需要注意中间件列表是有序的，不能改变顺序。</p><p>并在末尾添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span>  <span class="comment"># 打开跨域功能</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>至此，我们的django和vue的前后端分离框架基本搭建完成了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> django </tag>
            
            <tag> 跨域访问 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
